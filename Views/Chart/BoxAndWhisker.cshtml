@using Syncfusion.EJ2;
@section ControlsSection{
   <div>
    <div class="col-lg-9 control-section">
        <div>
    @(Html.EJS().Chart("container").Series(
           series =>
           {
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.BoxAndWhisker).
               Name("Department").
               DataSource(ViewBag.dataSource).
               XName("xValue").
               YName("yValue").
               Marker(ViewBag.marker).Add();
           }).PrimaryXAxis(
           xAxis =>          
               xAxis.ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
                    .LabelIntersectAction(Syncfusion.EJ2.Charts.LabelIntersectAction.Trim)
                    .EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift)
                    .MajorGridLines(ViewBag.gridlines)
           ).PrimaryYAxis(
           yAxis =>        
               yAxis.Minimum(10).
               Maximum(60).
               Interval(10).
               Title("Age").
               MajorGridLines(ViewBag.gridlines).
               MajorTickLines(ViewBag.ticklines)
           ).Title("Employee Age Group in Various Department").LegendSettings(
            legend => {
                legend.Visible(false);
            }).Tooltip(
           tooltip =>
           {
               tooltip.Enable(true);
           }).ChartArea(area => area.Border(ViewBag.ChartBorder)).Load("load").PointRender("labelRender").Render()   
       )       
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>
                            Mode:
                        </div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            @Html.EJS().DropDownList("dropdown").Index(0).DataSource(ViewBag.data).Value("Normal").Change("valueChange").Render()                           
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>Mean: </div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            <input type="checkbox" id="mean" checked="">
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>


<style>
    #control-container {
        padding: 0px !important;
    }
</style>
    <script>
      
        var materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',
    '#ea7a57', '#404041', '#00bdae'];
        var fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',
            '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];
        var bootstrapColors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',
            '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];
        var labelRender = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                args.fill = fabricColors[args.point.index % 10];
            }
            else if (selectedTheme === 'material') {
                args.fill = materialColors[args.point.index % 10];
            }
            else {
                args.fill = bootstrapColors[args.point.index % 10];
            }
           // args.border.color = getSaturationColor(args.fill, -0.6);
        };
        var load = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
        };
        function valueChange() {
            var chart = document.getElementById("container").ej2_instances[0];
            var mode = document.getElementById("dropdown").ej2_instances[0];
                chart.series[0].boxPlotMode = mode.value;
                chart.series[0].animation.enable = false;
                chart.refresh();
            }
        document.getElementById('mean').onchange = function () {
            var element = document.getElementById("mean");
            var chart = document.getElementById("container").ej2_instances[0];
            chart.series[0].showMean = element.checked;
            chart.series[0].animation.enable = false;
            chart.refresh();
        };

    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the employeeâ€™s age group in various departments of a country with box and whisker type series in the chart. Mode of box and whisker series can be changed by <code>Mode</code> in property panel. To display the <code>mean</code> value in a series, enable the Mean in the property panel.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the box and whisker type charts. Similar to line type series, but
        the area get closed and filled with series color. You can use <code>border</code>, <code>fill</code> properties
        to customize the area. <code>marker</code> and <code>dataLabel</code> are used to represent individual data and its
        value. Legend is enabled in this example with series type shape.
    </p>
    <br>
    <p>
        More information on the area series can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
    </p>
}