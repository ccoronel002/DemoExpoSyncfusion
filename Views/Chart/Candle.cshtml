@using Syncfusion.EJ2;
@section ControlsSection{
<script src="~/Scripts/financial-data.js"></script>
    <div class="control-section">
        <div align="center">
            <h4 id="days" style="font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;">AAPL Historical</h4>
           </div> 
           <div align="center" style="transform:translateX(10%)">
                @(Html.EJS().RangeNavigator("selector")
                            .LabelPosition(Syncfusion.EJ2.Charts.AxisPosition.Outside)
                    .ValueType(Syncfusion.EJ2.Charts.RangeValueType.DateTime)
                    .XName("x").YName("close").DataSource("chartData")
                    .DisableRangeSelector(true)
                    .PeriodSelectorSettings(ps => ps.Position(Syncfusion.EJ2.Charts.PeriodSelectorPosition.Top).Periods(ViewBag.periods))
                    .Load("load").Loaded("loaded").Changed("changed").Render()
                )
            </div>
            <div style="text-align:center">

                @Html.EJS().Chart("container").Rows(rows =>
       {
           rows.Height("30%").Add();
           rows.Height("70%").Add();
       }).Axes(ax =>
       {
           ax.Name("secondary").
           RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None).
           OpposedPosition(true).
           RowIndex(1).
           PlotOffset(30).
           Title("Price").LabelFormat("n0").
           LineStyle(ViewBag.lineStyle).Add();
       }
           ).Series(series =>
           {
               series.Animation(ViewBag.animation).Type(Syncfusion.EJ2.Charts.ChartSeriesType.Candle).XName("x").High("high").Low("low").Close("close").Open("open").DataSource("chartData1").YAxisName("secondary").Name("Apple Inc").Add();
               series.Animation(ViewBag.animation).Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).XName("x").YName("volume").Name("Volume").DataSource("chartData1").Add();               
           }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).MajorGridLines(ViewBag.majorGridLines).CrosshairTooltip(ViewBag.crosshairTooltip)
       ).PrimaryYAxis(py => py.RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None).StripLines(ViewBag.yAxisStripLine).ValueType(Syncfusion.EJ2.Charts.ValueType.Logarithmic).OpposedPosition(true).Title("Volume").LineStyle(ViewBag.lineStyle)
       ).Crosshair(cr => cr.Enable(true).LineType(Syncfusion.EJ2.Charts.LineType.Vertical)).ChartArea(area => area.Border(ViewBag.ChartBorder)).Load("chartload").TooltipRender("tooltipRender").AxisLabelRender("axisLabelRender").PointRender("pointrender").LegendSettings(lg => lg.Visible(true)).Tooltip(tt => tt.Enable(true).Shared(true)).Width("60%").Render()


            </div>
        </div>


    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    <script>
        var chartData1 = [];
        var chartData = chartData;
        var pointColors = [];
        var zoomFactor, zoomPosition;
        var selectedTheme = location.hash.split('/')[1];
        selectedTheme = selectedTheme ? selectedTheme : 'Material';
        var theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
        var load = function (args) {
            args.rangeNavigator.theme = theme;
            args.rangeNavigator.width = ej.base.Browser.isDevice ? "100%" : "80%";
            args.rangeNavigator.dataSource = chartData;
            args.rangeNavigator.periodSelectorSettings.height = document.body.className.indexOf('e-bigger') > -1 ? 56 : 42;
        }
        var tooltipRender = function (args) {
            if (args.series.index) {
                args.text = 'Volume : <b>' + getLabelText(args.text.split('<b>')[1].split('</b>')[0]) + '</b>';
            }
        }
        var axisLabelRender = function (args) {
            if (args.axis.name === 'primaryYAxis') {
                args.text = getLabelText(+args.text);
            }
            if (args.axis.name === 'secondary') {
                args.text = '$' + args.text;
            }
        };
        var pointrender = function (args) {
            if (args.series.type === 'Candle') { pointColors.push(args.fill); } else {
                args.fill = pointColors[args.point.index];
            }
        }
        var getLabelText = function (value) {
            return (((value) / 1000000000)).toFixed(1) + 'bn';
        };
       
        var changed = function (args) {
            if ((document.getElementById('container').childNodes.length > 1)) {
                var chart = document.getElementById('container').ej2_instances[0];
                chart.primaryXAxis.zoomFactor = 1;
                chart.primaryXAxis.zoomPosition = 0;
                var filterData = chartData.filter(function (data) {
                    return (data['x'].getTime() >= (args.start) && data['x'].getTime() <= (args.end));
                });
                chartData1 = filterData;
                pointColors = [];
                chart.series[0].animation.enable = false;
                chart.series[0].dataSource = filterData;
                chart.series[1].animation.enable = false;
                chart.series[1].dataSource = filterData;
                chart.refresh();
            }
        }
        var chartload = function (args) {
            args.chart.theme = theme;
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "80%";
            args.chart.series[0].dataSource = chartData1;
            args.chart.series[1].dataSource = chartData1;
        }
        var loaded = function (args) {
            if (!ej.base.Browser.isDevice && document.getElementById('container_Secondary_Element')) {
                document.getElementById('container_Secondary_Element').style.transform = 'translate(13%)';
            }
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the AAPL historical data with default candle series in the chart. Tooltip and crosshair shows the information about the data and period.
   </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the Candle type series. You can use <code>border</code>,
        <code>fill</code> properties to customize the area.
    </p>
    <p>
        Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <p>
        More information on the Candle series can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
    </p>
}