@using Syncfusion.EJ2;
@section ControlsSection{
<script src="~/Scripts/theme-color.js"></script>
<style>
    .waitingpopup {
        position: absolute;
        z-index: 100;
        top: 0;
        left: 0;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
        width: 50px;
        height: 50px;
    }

    .image {
        position: absolute;
        background-repeat: no-repeat;
        background-image: url('src/chart/images/Medium-36px-spin.gif');
        background-position: center;
        width: 50px;
        height: 50px;
        padding: 6px;
    }

    #control-container {
        padding: 0px !important;
    }
</style>
<div class="col-lg-12 control-section" style="text-align:center">

    @Html.EJS().Chart("container").Series(series =>
{
    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).XName("Assignee").Marker(ViewBag.marker)
.YName("Estimate").DataSource("dataManager").Query("query").Name("Story Point").Add();

}).PrimaryXAxis(px => px.Title("Assignee").RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.Additional).MajorGridLines(ViewBag.majorGridLines).ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
       ).ChartArea(area => area.Border(ViewBag.ChartBorder)).Tooltip(tl => tl.Enable(true)).PrimaryYAxis(py => py.MajorGridLines(ViewBag.majorGridLines).MajorTickLines(ViewBag.majorTickLines).LineStyle(ViewBag.lineStyle).LabelStyle(ViewBag.labelStyle)).Title("Sprint Task Analysis").Tooltip(tt => tt.Enable(true)).LegendSettings(lg => lg.Visible(false)).PointRender("pointRender").AxisLabelRender("labelRender").Load("load").Loaded("loadedChart").Render()

        <div id="waitingpopup" class="waitingpopup" style="display:none">
            <span id="gif" class="image"></span>
        
    </div>
</div>
    <script>
        var dataManager = new ej.data.DataManager({
            url: 'https://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'
        });

        var query = new ej.data.Query().take(5).where('Estimate', 'lessThan', 3, false);
        var labelRender = function (args) {
            if (args.axis.orientation === 'Horizontal') {
                args.text = args.text.split(' ')[0];
            }
        };
        var loaded = 1;
        var loadedChart = function (args) {
            var div = document.getElementById('waitingpopup');
            div.style.display = 'none';
            if (loaded) {
                args.chart.refresh();
            }
            loaded = 0;
        };
        var pointRender = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                args.fill = fabricColors[args.point.index % 10];
            }
            else if (selectedTheme === 'material') {
                args.fill = materialColors[args.point.index % 10];
            }
            else {
                args.fill = bootstrapColors[args.point.index % 10];
            }
        };
        var load = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
        }
    </script>
}
@section ActionDescription{
    <p>
    This sample illustrates how to retrieve remote the data for chart.
</p>
}
@section Description{
    <p>
    The Chart supports data binding. The <code> dataSource</code> property can be assigned with the instance of <code>
        <a target="_blank" class="code"
           href="http://ej2.syncfusion.com/documentation/data/api-dataManager.html">
            DataManager
        </a>
    </code> to bind remote data.
</p>
<p>
    The DataManager, which will act as an interface between the service endpoint and the chart, will require the below minimal
    information to interact with service endpoint properly.
</p>
<ul>
    <li><code>DataManager->url</code> - Defines the service endpoint to fetch data</li>
    <li>
        <code>DataManager->adaptor</code> - Defines the adaptor option. By default, <code>ODataAdaptor</code> is used for
        remote binding.
    </li>
</ul>
<p>
    Adaptor is responsible for processing response and request from/to the service endpoint. They
    are,
</p>
<ul>
    <li>
        <code>UrlAdaptor</code> - Use this to interact any remote services. This is the base adaptor for all remote based
        adaptors.
    </li>
    <li><code>ODataAdaptor</code> - Use this to interact with OData endpoints.</li>
    <li><code>ODataV4Adaptor</code> - Use this to interact with OData V4 endpoints.</li>
    <li><code>WebApiAdaptor</code> - Use this to interact with Web API created under OData standards.</li>
    <li><code>WebMethodAdaptor</code> - Use this to interact with web methods.</li>
</ul>
<p>
    In this demo, remote data is bound by assigning service data as an instance of <code>
        <a target="_blank" class="code"
           href="http://ej2.syncfusion.com/documentation/data/api-dataManager.html">
            DataManager
        </a>
    </code> to the <code>
        dataSource
    </code> property.
</p>
}