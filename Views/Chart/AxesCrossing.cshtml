@using Syncfusion.EJ2;
@section ControlsSection{
<div>
    <div class="col-md-8 control-section">
        <div class="content-wrapper">
            <div style="width:92%">
 @(Html.EJS().Chart("container-vertical")//.ChartArea(ca => ca.Border(ViewBag.border))
        .Series(sr =>
        {
            sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line)
              .XName("x")
              .YName("y")
              .Fill("Blue")
              .Name("Linear Interpolation")
              .EnableTooltip(false)
              .Width(2).DataSource(ViewBag.dataSource1).Add();
            sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Spline)
              .XName("x")
              .YName("y")
              .Fill("Green")
              .Name("Cubic Spline Interpolation")
              .EnableTooltip(false)
              .Width(2).DataSource(ViewBag.dataSource2).Add();
            sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Scatter)
              .XName("x")
              .YName("y")
              .Fill("Red")
              .Name("Data Points")
              .Marker(ViewBag.marker)
              .Width(2).DataSource(ViewBag.dataSource3).Add();
        })
          .PrimaryXAxis(xaxis =>
             xaxis.Minimum(-8).Maximum(8).Interval(2)
                    .ValueType(Syncfusion.EJ2.Charts.ValueType.Double)
                    .LineStyle(ViewBag.linestyle)
                    .MinorTickLines(ViewBag.ticklines)
                    .MajorTickLines(ViewBag.ticklines)
                    .CrossesAt(0)
                    .MinorTicksPerInterval(3)
          )
          .PrimaryYAxis(yaxis =>
              yaxis.MinorTickLines(ViewBag.ticklines)
                   .CrossesAt(0)
                   .MinorTicksPerInterval(3)
                   .Minimum(-8)
                   .Maximum(8)
                   .Interval(2)
                   .MajorTickLines(ViewBag.ticklines)
                   .LineStyle(ViewBag.linestyle)
          )
          .Title("Spline Interpolation")
          .Tooltip(tp => tp.Enable(true))
          .Load("load").Render()
    )
            </div>
        </div>
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Axis:</div>
                    </td>
                    <td style="width: 40%;">
                        <div>
                            @Html.EJS().DropDownList("selectAxis").Index(0).DataSource(ViewBag.data).Value("X").Change("valueChange").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Crosses Value:</div>
                    </td>
                    <td style="width: 40%;">
                        <div style="margin-top: 0px;">
                            @Html.EJS().NumericTextBox("crossingValue").Value(0).Min(-8).Max(8).Step(2).Width("120").Change("change").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Placing Label Near to Axis Line:</div>
                    </td>
                    <td style="width: 40%;">
                        <div style="margin-top: 0px;">
                            <input type="checkbox" id="axisElements" name="PlaceNextToAxisLine" checked="">
                        </div>
                    </td>
                </tr>

            </tbody>
        </table>
    </div>
</div>


<style>
    #control-container {
        padding: 0px !important;
    }
</style>
    <script>
        var load = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));

        };       
        
        document.getElementById('axisElements').onchange = function (e) {
            var chart = document.getElementById('container-vertical').ej2_instances[0];
            var axes = document.getElementById("selectAxis").ej2_instances[0];
            var value = e.target.checked;
            if (axes.index === 0) {
                chart.primaryXAxis.placeNextToAxisLine = value;
            }
            else {
                chart.primaryYAxis.placeNextToAxisLine = value;
            }
            chart.dataBind();
        };
        var valueChange = function () {
            var chart = document.getElementById('container-vertical').ej2_instances[0];
            var crossValue = document.getElementById("crossingValue").ej2_instances[0];
            var target = document.getElementById('axisElements');
            var axes = document.getElementById("selectAxis").ej2_instances[0];
            if (axes.index === 0) {
                target.checked = chart.primaryXAxis.placeNextToAxisLine;
                crossValue.value = +chart.primaryXAxis.crossesAt;
            }
            else {
                target.checked = chart.primaryYAxis.placeNextToAxisLine;
                crossValue.value = +chart.primaryYAxis.crossesAt;
            }
            chart.dataBind();
        };
        var change = function () {
            var chart = document.getElementById('container-vertical').ej2_instances[0];
            var axes = document.getElementById("selectAxis").ej2_instances[0];
            var crossValue = document.getElementById("crossingValue").ej2_instances[0];
            if (axes.index === 0) {
                chart.primaryXAxis.crossesAt = crossValue.value;
            }
            else {
                chart.primaryYAxis.crossesAt = crossValue.value;
            }
            chart.dataBind();
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample illustrates an interpolation of data points between linear and cubic by using spline and line series.
    </p>
}
@section Description{
    <p>
        This sample demonstrates the axis crossing behavior in chart. 
        Axis can be positioned anywhere in the chart area by using the <code>crossesAt</code> property of axis. This property specifies where the horizontal axis should intersect or cross the vertical axis and vice-versa.
    </p>
    <p>
        Default value of crossesAt property is null. So, you can use <code>placeNextToAxisLine</code> property to place the axis labels and ticks next to axis line. 
        When there are multiple axes, you can choose an axis to cross by using <code>crossesInAxis</code> property. 
        If the axis name is not valid, primaryXAxis or primaryYAxis will be used for crossing, by default.
    </p>
    <p>
        More information on the axis crossing can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
    </p>
}
