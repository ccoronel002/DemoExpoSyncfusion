@using Syncfusion.EJ2;
@section ControlsSection{
   <div class="control-section">
    <div style="text-align:center">
        @(Html.EJS().Chart("container")
    .Series(sr =>
    {
        sr.XName("xValue")
             .YName("yValue")
             .Name("Defect")
             .DataSource(ViewBag.dataSource)
             .Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).Add();
        sr.XName("xValue")
          .YName("yValue1")
          .Name("Cumulative")
          .YAxisName("secondary")
          .Width(2)
          .Marker(ViewBag.marker)
          .DataSource(ViewBag.dataSource)
          .Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Add();
    })
      .PrimaryXAxis(xaxis =>
          xaxis.Title("Defects")
            .Interval(1)
            .ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
            .MajorGridLines(ViewBag.gridlines)
            .MinorGridLines(ViewBag.gridlines)
            .MajorTickLines(ViewBag.ticklines)
            .MinorTickLines(ViewBag.ticklines)
            .LineStyle(ViewBag.linestyle)
      )
      .PrimaryYAxis(yaxis =>
          yaxis.Title("Frequency")
                .Minimum(0)
                .Maximum(150)
                .Interval(30)
                .MajorGridLines(ViewBag.gridlines)
                .MinorGridLines(ViewBag.gridlines)
                .MajorTickLines(ViewBag.ticklines)
                .MinorTickLines(ViewBag.ticklines)
                .LineStyle(ViewBag.linestyle)
      )
      .Axes(axis =>
      {
          axis.Title("Cumulative Frequency")
               .Minimum(0)
               .OpposedPosition(true)
               .Name("secondary")
               .Maximum(100)
               .Interval(20)
               .MajorGridLines(ViewBag.gridlines1)
               .MinorGridLines(ViewBag.gridlines1)
               .MajorTickLines(ViewBag.ticklines)
               .MinorTickLines(ViewBag.ticklines)
               .LineStyle(ViewBag.linestyle)
               .LabelFormat("{value}%").Add();
      })
      .Title("Defect vs Frequency")
      .LegendSettings(leg => leg.Visible(false))
      .Tooltip(tp => tp.Enable(true).Shared(true))
      .Load("load").ChartArea(area => area.Border(ViewBag.ChartBorder)).Render()
        )
    </div>
</div>


<style>
    #control-container {
        padding: 0px !important;
    }
</style>
    <script>
        function load(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
        }
    </script>
}
@section ActionDescription{
    <p>
    This sample illustrates a pareto chart with line and column series. Trackball shows the information about the data point closest to the mouse
</p>
}
@section Description{
    <p>
    In this example, you can see how to render and configure the different type of charts. You can render any combination of series in chart except bar.
    Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
</p>
<br>
<p>
    More information on the series can be found in this
    <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
</p>
}