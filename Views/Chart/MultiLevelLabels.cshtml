@using Syncfusion.EJ2;
<script src="~/Scripts/theme-color.js"></script>
@section ControlsSection{
<div>
    <div class="control-section">
        <div class="content-wrapper">
            <div style="text-align:center">

   @Html.EJS().Chart("container").Series(series =>
   {
       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).XName("x").YName("y").Marker(ViewBag.marker).DataSource(ViewBag.dataSource).Name("Germany").Add();
   }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(ViewBag.majorGridLines).IsIndexed(true).LabelRotation(90).Interval(1).LabelIntersectAction(Syncfusion.EJ2.Charts.LabelIntersectAction.Rotate90)
       ).PrimaryYAxis(py => py.Maximum(120).Minimum(0).Interval(30).MajorTickLines(ViewBag.majorTickLines).LineStyle(ViewBag.lineStyle)
       ).Title("Fruits and Vegetables - Season").ChartArea(area => area.Border(ViewBag.ChartBorder)).LegendSettings(lg=>lg.Visible(false)).Load("load").PointRender("labelRender").Render()

            </div>
        </div>
    </div>
</div>


<style>
    #control-container {
        padding: 0px !important;
    }
</style>
    <script>
        var labelRender = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                args.fill = fabricColors[args.point.index % 10];
            }
            else if (selectedTheme === 'material') {
                args.fill = materialColors[args.point.index % 10];
            }
            else {
                args.fill = bootstrapColors[args.point.index % 10];
            }
        };
        var load = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
            args.chart.primaryXAxis.border = { type: "Rectangle", width: 1 };
            args.chart.primaryXAxis.multiLevelLabels = (ej.base.Browser.isDevice ? ([
                {
                    border: { type: 'Rectangle' },
                    categories: [
                        { start: -0.5, end: 2.5, text: 'In Season', },
                        { start: 2.5, end: 5.5, text: 'Out of Season', },
                        { start: 5.5, end: 7.5, text: 'In Season', },
                        { start: 7.5, end: 9.5, text: 'Out of Season', },
                    ]
                }, {
                    border: { type: 'Rectangle' },
                    textStyle: { fontWeight: 'Bold' },
                    categories: [
                        { start: -0.5, end: 5.5, text: 'Fruits', },
                        { start: 5.5, end: 9.5, text: 'Vegetables', },
                    ]
                }]) : [
                    {
                        border: { type: 'Rectangle' },
                        categories: [
                            { start: -0.5, end: 0.5, text: 'Seedless', },
                            { start: 0.5, end: 2.5, text: 'Seeded', },
                            { start: 2.5, end: 3.5, text: 'Seedless', },
                            { start: 3.5, end: 5.5, text: 'Seeded', },
                            { start: 5.5, end: 6.5, text: 'Seedless', },
                            { start: 6.5, end: 7.5, text: 'Seeded', },
                            { start: 7.5, end: 8.5, text: 'Seedless', },
                            { start: 8.5, end: 9.5, text: 'Seeded', }
                        ]
                    }, {
                        border: { type: 'Rectangle' },
                        categories: [
                            { start: -0.5, end: 2.5, text: 'In Season', },
                            { start: 2.5, end: 5.5, text: 'Out of Season', },
                            { start: 5.5, end: 7.5, text: 'In Season', },
                            { start: 7.5, end: 9.5, text: 'Out of Season', },
                        ]
                    }, {
                        border: { type: 'Rectangle' },
                        textStyle: { fontWeight: 'Bold' },
                        categories: [
                            { start: -0.5, end: 5.5, text: 'Fruits', },
                            { start: 5.5, end: 9.5, text: 'Vegetables', },
                        ]
                    }])

        };
    </script>
}
@section ActionDescription{
    <p>
        Axis labels are placed based on the start and end range values and we can add any number of labels to an axis.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to group axis labels. 
        You can customize text in each level by using <code>alignment</code>, <code>overflow</code>, <code>textSytle</code> and <code>border</code> properties.
    </p>
    <p>Axis labels in each level can be arranged smartly using <code>overflow</code> property.
    </p>
    <ul>
        <li><code>Trim</code> - Trim the label when it intersect.</li>
        <li><code>Wrap</code> - Wrap the label when it intersect.</li>
        <li><code>None</code> - Shows all the labels.</li>
    </ul>
    <br>
    <p>Border of the axis labels can be customized by using <code>type</code> property.
    </p>
    <ul>
        <li><code>Rectangle</code></li>
        <li><code>Brace</code></li>
        <li><code>WithoutTopBorder</code></li>
        <li><code>WithoutTopandBottomBorder</code></li>
        <li><code>CurlyBrace</code></li>
        <li><code>withoutBorder</code>.</li>
    </ul>
    <p>
        More information on the multi level labels can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-axis.html#valuetype-valuetype">documentation section</a>.
    </p>
}