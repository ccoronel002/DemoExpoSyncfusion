@using Syncfusion.EJ2;
@section ControlsSection{
        <div class="col-lg-9 control-section">
 @(Html.EJS().Chart("export-container")
    .Series(sr =>
    {
        sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
            .XName("xValue")
            .YName("yValue")
            .Width(2)
            .DataSource(ViewBag.dataSource).Add();
    })
      .PrimaryXAxis(xaxis =>
         xaxis.MajorGridLines(ViewBag.gridlines)
              .Title("Countries")
              .ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
      )
      .PrimaryYAxis(yaxis =>
          yaxis.Title("Measurements")
            .Minimum(0)
            .Maximum(40)
            .MajorGridLines(ViewBag.gridlines)
            .LabelFormat("{value}GW")
            .Interval(10)
      )
      .Title("Top 10 Countries Using Solar Power")
      .Tooltip(tp => tp.Enable(true))
      .Load("load").ChartArea(area => area.Border(ViewBag.ChartBorder)).PointRender("labelRender").Render()
   )          
        </div>
        <div class="col-lg-3 property-section">
            <table id="property" title="Properties" style="width: 100%">
                <tr style="height: 50px">
                    <td style="width: 20%">
                        <div>
                            Export Type:
                        </div>
                    </td>
                    <td style="width: 80%;">
                        <div style="margin-left: -20px">
                            @Html.EJS().DropDownList("Export").Index(0).DataSource(ViewBag.data).Value("JPEG").Change("valueChange").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 40%">
                        <div>File Name:</div>
                    </td>
                    <td style="width: 40%;">
                        <div class="e-float-input" style='margin-top: 0px;'>
                            <input type="text" value="Chart" id="fileName" style="margin-left: -20px">
                        </div>
                    </td>
                </tr>
                <tr id="button-control" style="height: 50px" align='center'>
                    <td>
                        <div>
                            @Html.EJS().Button("togglebtn").IsPrimary(true).IconCss("e-icons e-play-icon").Content("Export").CssClass("e-flat").Render()
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    <style>
        #button-control {
        width: 100%;
        text-align: center;
    }
    
    #control-container {
        padding: 0px !important;
    }
    
    .e-play-icon::before {
        content: '\e728';
    }
    </style>
    <script src="~/Scripts/theme-color.js"></script>
    <script>
            var load = function (args) {
                var selectedTheme = location.hash.split('/')[1];
                selectedTheme = selectedTheme ? selectedTheme : 'Material';
                args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            };
            var labelRender = function (args) {
                var selectedTheme = location.hash.split('/')[1];
                selectedTheme = selectedTheme ? selectedTheme : 'Material';
                if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                    args.fill = fabricColors[args.point.index % 10];
                }
                else if (selectedTheme === 'material') {
                    args.fill = materialColors[args.point.index % 10];
                }
                else {
                    args.fill = bootstrapColors[args.point.index % 10];
                }
            };
            var mode = "JPEG";
            function valueChange() {
                var exportType = document.getElementById('Export').ej2_instances[0];
                mode = exportType.value;
            }
            document.getElementById('togglebtn').onclick = function () {
                var chart = document.getElementById('export-container').ej2_instances[0];
                var fileName = (document.getElementById('fileName')).value;
                chart.export(mode, fileName);
            };
    </script>
}
@section ActionDescription{
    <p>
        This sample illustrates the export feature in chart. By clicking <code>Export</code>, you can export the chart in PNG or JPEG format.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the export. The rendered chart can be exported as either JPEG or
        PNG format. It can be achieved using Blob and it's supported only in modern browsers.
    </p>
    <p>
        More information on the export can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
    </p>
}
