@using Syncfusion.EJ2;
@section ControlsSection{
<div>
    <div class="col-lg-9 control-section">
        <div>
  @(Html.EJS().Chart("container")
    .Series(sr =>
    {
        sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Polar)
            .DrawType(Syncfusion.EJ2.Charts.ChartDrawType.Line)
            .Name("Warmest")
            .XName("xValue")
            .YName("yValue")
            .Width(2)
            .Marker(ViewBag.marker1)
            .DataSource(ViewBag.dataSource).Add();
        sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Polar)
            .DrawType(Syncfusion.EJ2.Charts.ChartDrawType.Line)
            .Name("Coldest")
            .XName("xValue")
            .YName("yValue1")
            .Width(2)
            .Marker(ViewBag.marker2)
            .DataSource(ViewBag.dataSource).Add();
    })
      .PrimaryXAxis(xaxis =>
         xaxis.ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
             .LabelPlacement(Syncfusion.EJ2.Charts.LabelPlacement.OnTicks)
             .Interval(1)
             .Coefficient(100)
             .Title("Months")
      )
      .PrimaryYAxis(yaxis =>
          yaxis.Title("Temperature (Celsius)").LabelFormat("{value}Â°C")
                 .Interval(10)
                 .Minimum(-25)
                 .Maximum(25)
                 .EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift)
      )
      .Title("Alaska Weather Statistics - 2016").Tooltip(tp=>tp.Enable(true)).Load("load").Render()
      )
            </div>
        <div style="float: right; margin-right: 10px;">
            Source:
            <a href="http://www.yr.no/place/USA/Alaska/Hatcher_Pass/statistics.html" target="_blank">www.yr.no</a>
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>
                            Series Type:
                        </div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            @Html.EJS().DropDownList("dropdown").Index(0).DataSource(ViewBag.data).Value("Polar").Change("valueChange").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>Closed: </div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            <input type="checkbox" id="isClosed" checked="">
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 30%">
                        <div>
                            Start Angle:
                            <p id="startAngleValue" style="font-weight: normal;">0</p>
                        </div>
                    </td>
                    <td style="width: 70%;">
                        <div data-role="rangeslider">
                            <input type="range" name="range-min" id="startangle" value="0" min="0" max="360" style="width:90%">
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>Inversed: </div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            <input type="checkbox" id="isinversed">
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>


<style>
    #control-container {
        padding: 0px !important;
    }
</style>
    <script>
       var load = function(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
        }
       
       document.getElementById('isClosed').onchange = function () {
           var chart = document.getElementById('container').ej2_instances[0];
            var element = (document.getElementById('isClosed'));
            chart.series[0].isClosed = element.checked;
            chart.series[1].isClosed = element.checked;
            chart.series[0].animation.enable = false;
            chart.series[1].animation.enable = false;
            chart.refresh();
       };
       document.getElementById('startangle').onpointermove = document.getElementById('startangle').ontouchmove =
   document.getElementById('startangle').onchange = function () {
       var chart = document.getElementById('container').ej2_instances[0];
       var element = (document.getElementById('startangle'));
       chart.primaryXAxis.startAngle = parseInt(element.value, 10);
       document.getElementById('startAngleValue').innerHTML = parseInt(element.value, 10) + '';
       chart.series[0].animation.enable = false;
       chart.series[1].animation.enable = false;
       chart.refresh();
   };
       document.getElementById('isinversed').onchange = function () {
           var chart = document.getElementById('container').ej2_instances[0];
           var element = (document.getElementById('isinversed'));
           chart.primaryXAxis.isInversed = element.checked;
           chart.primaryYAxis.isInversed = element.checked;
           chart.dataBind();
       };
       var valueChange = function () {
           var chart = document.getElementById('container').ej2_instances[0];
           var polarType = document.getElementById("dropdown").ej2_instances[0];
           chart.series[0].type = polarType.value;
           chart.series[1].type = polarType.value;
           chart.series[0].animation.enable = true;
           chart.series[1].animation.enable = true;
           chart.refresh();
       }
    </script>
}
@section ActionDescription{
    <p>
    This sample demonstrates polar series with line type for Alaska weather statistics data of the year 2016. The angle can be changed and the series can be inversed by using the properties in the panel.
</p>
}
@section Description{
    <p>
    In this example, you can see how to render and configure the line type charts. Line type charts are used to represent time-dependent
    data, showing trends in data at equal intervals. You can use
    <code>dashArray</code>,
    <code>width</code>,
    <code>fill</code> properties to customize the line.
    <code>marker</code> and
    <code>dataLabel</code> are used to represent individual data and its value.
</p>
<p>
    Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
</p>
<br>
<p>
    More information on the polar series can be found in this
    <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
</p>
}