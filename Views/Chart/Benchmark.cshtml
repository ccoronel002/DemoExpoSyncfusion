@using Syncfusion.EJ2;
@section ControlsSection{
<div>
    <div class="col-lg-9 control-section">
        <div class="content-wrapper">
            <div>
                @Html.EJS().Chart("container").Series(series =>
           {
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
               Name("Series1").
               Animation(an=>an.Enable(false)).Add();

           }).PrimaryXAxis(
               xAxis =>
               {
                   xAxis.MajorGridLines("line");
            }).LegendSettings(
               legend =>
               {
                   legend.Visible(false);
               }).Load("onChartLoad").Render()

                    
                

            </div>
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>
                            @Html.EJS().Button("load").Content("Load 100K Points").CssClass("e-info").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 30%">
                        <div>Time Taken</div>
                    </td>
                    <td style="width: 70%;">
                        <div>
                            <span id="performanceTime">0ms</span>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>


<style>
    #control-container {
        padding: 0px !important;
    }
    .e-info {
        text-transform:none !important
    }
</style>
    <script>
        var chart;
        var loaded;
        var dt1;
        var dt2;
        //var button = new Button({ cssClass: 'e-info', isPrimary: true });
        //button.appendTo('#load');

        document.getElementById('load').onclick = function () {
            var chart = document.getElementById("container").ej2_instances[0];
            var series1 = [];
            var point1;
            var value = 0;
            var i;
            for (i = 0; i < 100000; i++) {
                value += (Math.random() * 10 - 5);
                point1 = { x: i, y: value };
                series1.push(point1);
            }
            dt1 = new Date().getTime();
            chart.series[0].dataSource = series1;
            chart.series[0].xName = 'x';
            chart.series[0].yName = 'y';
            chart.legendSettings.visible = false;
            chart.loaded = loaded;
            chart.refresh();
        };
        loaded = function (args) {
            dt2 = new Date().getTime();
            document.getElementById('performanceTime').innerHTML = (dt2 - dt1) + 'ms';
        };

        var onChartLoad = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));

        };
    </script>
}
@section ActionDescription{
    <p>
        This sample demonstrates the performance of EJ2 chart to render 100K points.
    </p>
}
@section Description{
    <p>
     Chart includes several data rendering optimizations to achieve the best possible performance when plotting large volumes of data as well as handling high frequency real-time data.In this demo, chart is rendered with 100K points.
    </p> 
}