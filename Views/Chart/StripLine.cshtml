@using Syncfusion.EJ2;
@section ControlsSection{
<div>
    <div class="col-md-8 control-section">
        <div>

@Html.EJS().Chart("container").Series(series =>
{
    series.Name("Weather").XName("x").YName("y").Marker(ViewBag.marker).Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).DataSource(ViewBag.dataSource).Fill("#ffffff").Width(2).Add();
}).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category).StripLines(ViewBag.xAxisStripLine).MajorGridLines(ViewBag.majorGridLines)
).PrimaryYAxis(py => py.Minimum(10).Maximum(40).Interval(5).LabelFormat("{value}Â°C").StripLines(ViewBag.yAxisStripLine).LineStyle(ViewBag.lineStyle).RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None)
).LegendSettings(lg => lg.Visible(false)).Tooltip(tt => tt.Enable(true)).Title("Weather Report").Load("load").Render()
 
        </div>
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>StripLine Orientation:</div>
                    </td>
                    <td style="width: 40%;">
                        <div>
                            @Html.EJS().DropDownList("selmode").Index(0).DataSource(ViewBag.data).Value("Vertical").Change("valueChange").Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>


<style>
    #control-container {
        padding: 0px !important;
    }

    #control-container {
        padding: 0px !important;
    }

    #winter stop {
        stop-color: #4ca1af;
    }

        #winter stop[offset="0"] {
            stop-color: #c4e0e5;
        }

        #winter stop[offset="1"] {
            stop-color: #4ca1af;
        }

    #summer stop {
        stop-color: #ffa751;
    }

        #summer stop[offset="0"] {
            stop-color: #ffe259;
        }

        #summer stop[offset="1"] {
            stop-color: #ffa751;
        }

    #spring stop {
        stop-color: #1d976c;
    }

        #spring stop[offset="0"] {
            stop-color: #93f9b9;
        }

        #spring stop[offset="1"] {
            stop-color: #1d976c;
        }

    #autumn stop {
        stop-color: #603813;
    }

        #autumn stop[offset="0"] {
            stop-color: #b29f94;
        }

        #autumn stop[offset="1"] {
            stop-color: #603813;
        }
</style>
<svg style="height: 0">
    <defs>
        <linearGradient id="winter" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="summer" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="spring" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="autumn" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
    </defs>
</svg>
    <script>
        var load = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
        };
        var valueChange = function () {
            var chart = document.getElementById('container').ej2_instances[0];
            var mode = document.getElementById("selmode").ej2_instances[0];
            if (mode === 'Vertical') {
                for (var i = 0; i < 3; i++) {
                    chart.primaryYAxis.stripLines[i].visible = false;
                }
                for (var i = 0; i <= 4; i++) {
                    chart.primaryXAxis.stripLines[i].visible = true;
                }
            }
            else {
                for (var i = 0; i < 3; i++) {
                    chart.primaryYAxis.stripLines[i].visible = true;
                }
                for (var i = 0; i <= 4; i++) {
                    chart.primaryXAxis.stripLines[i].visible = false;
                }
            }
            chart.refresh();
        };
        

    </script>
}
@section ActionDescription{
    <p>
    This sample highlights certain range in an axis by using stripline feature.
</p>
}
@section Description{
    <p>
    In this example, you can see how to render and configure the stripline charts. You can use stripline by enable the <code>visible</code>        property. Striplines are rendered in the specified <code>start</code> and <code>end</code> range and you can add
    more than one stripline for an axis.
</p>
<p>
    Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
</p>
<br>
<p>
    More information on the strip line can be found in this
    <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
</p>
}