@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView

@section ControlsSection{
    @{var stock = "\"" + "Sum(In_Stock)" + "\"";}
    @{var sold = "\"" + "Sum(Sold)" + "\"";}
    @{ var totalPrice = stock + "+" + sold;}

    <div class="col-lg-9 control-section">
        <div class="content-wrapper">
            @Html.EJS().PivotView("pivotview").Width("100%").Height("300").DataSource(dataSource => dataSource.Data((IEnumerable<object>)ViewBag.Data).ExpandAll(false).EnableSorting(true)
           .FormatSettings(formatsettings =>
           {
               formatsettings.Name("Amount").Format("C0").MaximumSignificantDigits(10).MinimumSignificantDigits(1).UseGrouping(true).Add();
           })
           .Rows(rows =>
           {
               rows.Name("Country").Add();
               rows.Name("Products").Add();
           })
           .Columns(columns =>
           {
               columns.Name("Year").Add();
               columns.Name("Order_Source").Caption("Order Source").Add();
           })
           .Values(values =>
           {
               values.Name("In_Stock").Caption("In Stock").Add();
               values.Name("Sold").Caption("Units Sold").Add();
               values.Name("Total").Caption("Total Units").Type(SummaryTypes.CalculatedField).Add();
           })
           .Filters(filters =>
           {
               filters.Name("Product_Categories").Caption("Product Categories").Add();
           })
           .CalculatedFieldSettings(calculatedfieldsettings =>
           {
               calculatedfieldsettings.Name("Total").Formula(totalPrice).Add();
           })
           ).GridSettings(new PivotViewGridSettings { ColumnWidth = 140 }).AllowCalculatedField(true).ShowFieldList(true).Render()
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td>
                        <div>
                            @Html.EJS().Button("calculated-field-btn").Content("Calculated Field").IsPrimary(true).Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <style>
        #pivotview {
            width: 100%;
            height: 100%;
        }
    </style>
    <script>
        document.getElementById("calculated-field-btn").addEventListener('click', function () {
            var pivotGridObj = document.getElementById('pivotview').ej2_instances[0];
            pivotGridObj.calculatedFieldModule.createCalculatedFieldDialog();
        });
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
   <div id="action-description">
       <p>
           In this sample,
           <b>Total Units</b> acts as the calculated field. Users are allowed to insert a new calculated field based on the existing
           calculated items either through a dialog window at run time or through code behind.
       </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The calculated field feature allows users to create custom fields which are not present in the actual data. Users can
            create these fields using basic mathematical expression collaborating with existing fields. Calculated fields can
            be created through UI dialog as well as code behind and it can be enabled by setting <code>allowCalculatedField</code> as true. The
            <code>calculatedFieldSettings</code> property is available to configure the calculated field in code behind.
        </p>
    </div>
}
