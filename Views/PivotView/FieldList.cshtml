@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView

@section ControlsSection{

    <div class="control-section">
    <div class="content-wrapper">
        @Html.EJS().PivotView("pivotview").Width("99%").Height("530").EnginePopulated("onGridEnginePopulate").GridSettings(new PivotViewGridSettings { ColumnWidth = 140 }).Render()

        @Html.EJS().PivotFieldList("pivotfieldlist").RenderMode(Mode.Fixed).DataSource(dataSource => dataSource.Data((IEnumerable<object>)ViewBag.Data).ExpandAll(false).EnableSorting(true)
           .FormatSettings(formatsettings => { formatsettings.Name("Amount").Format("C0").MaximumSignificantDigits(10).MinimumSignificantDigits(1).UseGrouping(true).Add(); })
           .Rows(rows => { rows.Name("Country").Add(); rows.Name("Products").Add(); })
           .Columns(columns => { columns.Name("Year").Add(); columns.Name("Order_Source").Caption("Order Source").Add(); })
           .Values(values =>
           {
               values.Name("In_Stock").Caption("In Stock").Add(); values.Name("Sold").Caption("Units Sold").Add();
               values.Name("Amount").Caption("Sold Amount").Add();
           })
           .Filters(filters => {
               filters.Name("Product_Categories").Caption("Product Categories").Add();
           })).Load("onLoad").EnginePopulated("onFieldListEnginePopulate").DataBound("onDataBound").AllowCalculatedField(true).Render()
        </div>
    </div>

    <style>
        #pivotview {
            width: 58%;
            height: 100%;
        }

        #pivotfieldlist {
            width: 42%;
            height: 100%;
        }
        .e-pivotview {
            float: left;
        }

        .e-pivotfieldlist {
            float: right;
        }

        .e-pivotfieldlist .e-static {
            width: 100% !important;
        }
    </style>
    <script>
        function onLoad(args) {
            var fieldlistObj = document.getElementById('pivotfieldlist').ej2_instances[0];
            if (fieldlistObj) {
                if (ej.base.Browser.isDevice) {
                    fieldlistObj.renderMode = 'Popup';
                    fieldlistObj.target = '.control-section';
                    document.getElementById('pivotfieldlist').removeAttribute('style');
                    ej.base.setStyleAttribute(document.getElementById('pivotfieldlist'), {
                        'height': 0,
                        'float': 'left'
                    });
                }
            }
        }
        function onGridEnginePopulate(args) {
            var pivotGridObj = document.getElementById('pivotview').ej2_instances[0];
            var fieldlistObj = document.getElementById('pivotfieldlist').ej2_instances[0];
            if (fieldlistObj) {
                fieldlistObj.update(pivotGridObj);
            }
        }
        function onFieldListEnginePopulate(args) {
            if (document.getElementById('pivotview')) {
                var pivotGridObj = document.getElementById('pivotview').ej2_instances[0];
                var fieldlistObj = document.getElementById('pivotfieldlist').ej2_instances[0];
                fieldlistObj.updateView(pivotGridObj);
            }
        }
        function onDataBound(args) {
            if (document.getElementById('pivotview')) {
                var pivotGridObj = document.getElementById('pivotview').ej2_instances[0];
                var fieldlistObj = document.getElementById('pivotfieldlist').ej2_instances[0];
                pivotGridObj.toolTip.destroy();
                pivotGridObj.refresh();
                if (ej.base.Browser.isDevice) {
                    ej.base.prepend([document.getElementById('pivotfieldlist')], document.getElementById('pivotview'));
                }
            }
        }
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
   <div id="action-description">
       <p>
           This sample demonstrates the field list feature of the pivotgrid widget. In this sample, fields are automatically populated
           from the bound data source and can be used to create a pivot view at runtime.
       </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The pivotgrid widget provides a built-in field list very similar to Microsoft Excel. The top section of the field list
            allows the user to add and remove fields. The bottom section of the field list allows the user to rearrange the fields
            between different axes, including column, row, value, and filter along with filter and sort options.
            <br>
            <br> To show the field list independently, create as separate widget namely
            <code>PivotFieldList</code> and assign JSON data source to its
            <code>dataSource->data</code> property. Simultaneously pivotgrid will be populated by passing its instance in the updateView method, inside the
            <code>enginePopulated</code> event of field list.
        </p>
    </div>
}
