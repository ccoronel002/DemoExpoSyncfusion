@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.Schedule

@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("550px").ResourceHeaderTemplate("#resourceTemplate").Group(group => group.Resources(ViewBag.Resources)).Resources(res => { res.DataSource(ViewBag.Doctors).Field("DoctorId").Title("Doctor Name").Name("Doctors").TextField("text").IdField("id").ColorField("color").WorkDaysField("workDays").StartHourField("startHour").EndHourField("endHour").Add(); }).Views(view => { view.Option(View.WorkWeek).Add(); view.Option(View.Month).Add(); }).EventSettings(e => e.Fields(f => f.Subject(sub => sub.Name("Subject").Title("Service Type")).Location(loc => loc.Name("Location").Title("Patient Name")).Description(des => des.Name("Description").Title("Summary")).StartTime(st => st.Name("StartTime").Title("From")).EndTime(et => et.Name("EndTime").Title("To"))).DataSource(ViewBag.datasource)).SelectedDate(new DateTime(2018, 4, 1)).PopupOpen("onPopupOpen").ActionBegin("onActionBegin").RenderCell("onRenderCell").Render()
        </div>
    </div>
    <style>
        .e-schedule .e-month-view .e-work-days.willsmith,
        .e-schedule .e-vertical-view .e-work-hours.willsmith {
            background-color: #faebd7;
        }

        .e-schedule .e-month-view .e-work-days.alice,
        .e-schedule .e-vertical-view .e-work-hours.alice {
            background-color: #deecfc;
        }

        .e-schedule .e-month-view .e-work-days.robson,
        .e-schedule .e-vertical-view .e-work-hours.robson {
            background-color: #deeeac;
        }

        .e-schedule .e-vertical-view .e-resource-cells {
            height: 62px;
        }

        .e-schedule .template-wrap {
            display: flex;
            text-align: left;
        }

        .e-schedule .template-wrap .resource-image {
            background-repeat: no-repeat;
            background-size: 45px;
            height: 45px;
            width: 45px;
        }

        .e-schedule .template-wrap .resource-details {
            padding-left: 10px;
        }

        .e-schedule .template-wrap .resource-details .resource-name {
            font-size: 16px;
            font-weight: 500;
            margin-top: 5px;
        }

        .e-schedule.e-device .template-wrap .resource-details .resource-name {
            font-size: inherit;
            font-weight: inherit;
        }

        .e-schedule.e-device .e-resource-tree-popup .e-fullrow {
            height: 50px;
        }
            
        .e-schedule.e-device .template-wrap .resource-details .resource-designation {
            display: none;
        }
            
        .e-schedule .template-wrap .resource-image img {
            width: 45px;
            height: 45px;
        }

    </style>
    <script id="resourceTemplate" type="text/x-template">
        <div class='template-wrap'>
            <div class="resource-image"><img src="@Url.Content("~/Content/schedule/images/${getResourceImage(data)}.png")" /></div>
            <div class="resource-details">
                <div class="resource-name">${getResourceName(data)}</div>
                <div class="resource-designation">${getResourceLevel(data)}</div>
            </div>
        </div>
    </script>
    <script type="text/javascript">
        window.getResourceName = function (value) {
            return (value.resourceData) ? value.resourceData[value.resource.textField] : value.resourceName;
        };
        window.getResourceImage = function (value) {
            var resourceName = window.getResourceName(value);
            return resourceName.replace(' ', '-').toLowerCase();
        };
        window.getResourceLevel = function (value) {
            var resourceName = window.getResourceName(value);
            return (resourceName === 'Will Smith') ? 'Cardiologist' : (resourceName === 'Alice') ? 'Neurologist' : 'Orthopedic Surgeon';
        };

        function onPopupOpen(args) {
            if (args.target && args.target.classList.contains('e-work-cells')) {
                args.cancel = !args.target.classList.contains('e-work-hours');
            }
        }
        function onActionBegin(args) {
            if (args.requestType === 'eventCreate' && args.data.length > 0) {
                var scheduleObj = document.getElementById('schedule').ej2_instances[0];
                var eventData = args.data[0];
                var eventField = scheduleObj.eventFields;
                var startDate = eventData[eventField.startTime];
                var endDate = eventData[eventField.endTime];
                var resourceIndex = [1, 2, 3].indexOf(eventData.DoctorId);
                args.cancel = !scheduleObj.isSlotAvailable(startDate, endDate, resourceIndex);
            }
        }
        function onRenderCell(args) {
            if (args.element.classList.contains('e-work-hours') || args.element.classList.contains('e-work-cells')) {
                ej.base.addClass([args.element], ['willsmith', 'alice', 'robson'][parseInt(args.element.getAttribute('data-group-index'), 10)]);
            }
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This demo showcases the different available dates of doctors and their appointments on those days.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this demo, different working days are assigned by passing the
            <code>WorkDays</code> collection for each doctor to show their available dates. On each of their available dates, their daily available
            time range is also depicted by mentioning the
            <code>StartHour</code> and
            <code>EndHour</code> for each doctor. These values needs to be provided along with the resource
            <code>DataSource</code> by mapping the appropriate fields namely
            <code>WorkDaysField</code>,
            <code>StartHourField</code> and
            <code>EndHourField</code>.
        </p>
        <p>
            Here, we have customized the background cell color of the available times of each doctor using
            <code>RenderCell</code> event to denote that, only those timeslots are available for booking appointments. All other cells are simply read-only
            and no appointments can be booked on it. Also, if the applicable timeslot already contains an appointment, then no
            more appointments can be added to that cell which has been prevented by making use of the
            <code>isSlotAvailable</code> function within the
            <code>ActionBegin</code> event checking for
            <code>EventCreate</code> request type. The resource header is customized by making use of the
            <code>ResourceHeaderTemplate</code> option.
        </p>
    </div>
}