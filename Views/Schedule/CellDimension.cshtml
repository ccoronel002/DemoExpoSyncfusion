@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.Schedule

@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Views(ViewBag.view).ActionComplete("onActionComplete").Created("onCreated").EventRendered("onEventRendered").EventSettings(new ScheduleEventSettings { DataSource = ViewBag.datasource }).CssClass("schedule-cell-dimension").Height("550px").SelectedDate(new DateTime(2018, 2, 15)).Render()
        </div>
    </div>
    <style>
        .schedule-cell-dimension.e-schedule .e-vertical-view .e-date-header-wrap table col,
        .schedule-cell-dimension.e-schedule .e-vertical-view .e-content-wrap table col {
            width: 200px;
        }

        .schedule-cell-dimension.e-schedule .e-vertical-view .e-time-cells-wrap table th,
        .schedule-cell-dimension.e-schedule .e-vertical-view .e-work-cells {
            height: 100px;
        }

        .schedule-cell-dimension.e-schedule .e-month-view .e-work-cells,
        .schedule-cell-dimension.e-schedule .e-month-view .e-date-header-wrap table col {
            width: 200px;
        }

        .schedule-cell-dimension.e-schedule .e-month-view .e-work-cells {
            height: 200px;
        }
    </style>
    <script src="~/Scripts/schedule/applyCategoryColor.js"></script>
    <script type="text/javascript">
        function onCreated(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            scheduleObj.adjustEventWrapper();
        }
        function onActionComplete(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            if (args.requestType === 'dateNavigate' || args.requestType === 'viewNavigate') {
                scheduleObj.adjustEventWrapper();
            }
        }
        function onEventRendered(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            applyCategoryColor(args, scheduleObj.currentView);
        }

    </script>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo shows how to set the width and height of the cells by overriding the default CSS classes, so that the Schedule
            events are viewable in a zoomed in style.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this demo, the height and width of the Schedule cells are set by overriding the default CSS class. By doing so, it also
            needs to adjust the outer event wrapper element to cope with the CSS changes which can be done by calling the
            <code>adjustEventWrapper</code> method.
        </p>
    </div>
}
