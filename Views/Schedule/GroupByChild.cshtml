@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.Schedule

@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("550px").CurrentView(View.WorkWeek).SelectedDate(new DateTime(2018, 6, 5)).StartHour("09:00").EndHour("19:00").Group(group => group.ByGroupID(false).Resources(ViewBag.Resources)).Resources(res =>
       {
           res.DataSource(ViewBag.Projects).Field("ProjectId").Title("Choose Project").Name("Projects").TextField("text").IdField("id").ColorField("color").Add();
           res.DataSource(ViewBag.Categories).Field("CategoryId").Title("Category").Name("Categories").TextField("text").IdField("id").ColorField("color").AllowMultiple(true).Add();
       }).EventSettings(e => e.Fields(f => f.Subject(sub => sub.Name("Subject").Title("Summary")).Description(des => des.Name("Description").Title("Comments"))).DataSource(ViewBag.datasource)).Render()
        </div>
    </div>
    <style>
        .e-schedule:not(.e-device) .e-agenda-view .e-content-wrap table td:first-child {
            width: 90px;
        }

        .e-schedule .e-agenda-view .e-resource-column {
            width: 100px;
        }
    </style>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo illustrates the work progress under two different projects which are categorized as "Development" and "Testing",
            since both the projects comes across the two common stages.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this demo, there are two resource levels defined under the
            <code>resources</code> property - one with the name
            <code>Projects</code> and other with the name
            <code>Categories</code> respectively. Also, both the names are defined in the
            <code>group</code> property to allow two level hierarchical grouping. The order of grouping depends on the order of names passed onto
            the
            <code>resources</code> option within
            <code>group</code>. The requirement here is to categorize the sub-options that are common to both the projects and therefore to enable
            such grouping, it is necessary to set
            <code>byGroupID</code> option within the
            <code>groupID</code> - whereby allowing all the resources available in each child level to group under its parent resources. With this
            option available, we can avoid the need to provide multiple definitions of the same data to be grouped under different
            parent.
        </p>
        <p>
            Also, the colors defined at the last level resources will get applied to the events of those resources by default. In case,
            if the colors of parent level needs to be applied to child events, then it is necessary to define the
            <code>resourceColorField</code> option within the
            <code>eventSettings</code> propertyÂ with the parent level resource name value.
        </p>
    </div>
}