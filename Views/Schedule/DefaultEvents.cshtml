@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.Schedule

@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("550px").EventSettings(new ScheduleEventSettings { DataSource = ViewBag.datasource }).SelectedDate(new DateTime(2018, 2, 15)).EventRendered("onEventRendered").Render()
        </div>
    </div>
    <script type="text/javascript">
        function onEventRendered(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            var categoryColor;
            var appData = args.data;
            var eventFields = scheduleObj.eventFields;
            var parentApp = new ej.data.DataManager(scheduleObj.eventsData).
            executeLocal(new ej.data.Query().where(eventFields.id, 'equal', appData[eventFields.id]))[0];
            var start = new Date(parentApp[eventFields.startTime]).setHours(0, 0, 0, 0);
            var end = new Date(parentApp[eventFields.endTime]).setHours(0, 0, 0, 0);
            if (appData.IsAllDay) {
                categoryColor = '#8e24aa';
            } else if (start !== end) {
                categoryColor = '#f57f17';
            } else {
                categoryColor = '#7fa900';
            }
            if (scheduleObj.currentView === 'Agenda') {
                (args.element.firstChild).style.borderLeftColor = categoryColor;
            } else {
                args.element.style.backgroundColor = categoryColor;
            }
        }
    </script>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample illustrates the usage of different types of events such as normal, spanned and all-day. Here, the Schedule acts
            as a leave planner for an employee to plan his upcoming leaves as well as to keep track of his previously taken time-offs
            and leaves.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            Schedule requires only the
            <code>StartTime</code> and
            <code>EndTime</code> fields as mandatory to be mapped from datasource and provided with proper datetime values to display the normal
            events in it. The normal events can be categorized into 3 types based on its time range and all-day type.
        </p>
        <table style="width:100%">
            <tr>
                <th style="width:100px">
                    <strong>Event</strong>
                </th>
                <th>
                    <strong>Description</strong>
                </th>
            </tr>
            <tr>
                <td style="padding:4px 0;">Normal events</td>
                <td>
                    The events that has its start and end time duration on the same date. These events are depicted in green color
                    in the above sample.
                </td>
            </tr>
            <tr>
                <td style="padding:4px 0;">Spanned events</td>
                <td>
                    The events on which its start and end time spans over multiple days and usually displays together with all-day events. These
                    events are depicted in orange color which can be seen by navigating to the next date period and are depicted
                    in orange color.
                </td>
            </tr>
            <tr>
                <td style="padding:4px 0;">All-day events</td>
                <td>
                    The events that are defined as all-day in its event object by setting
                    <code>IsAllDay</code> to true. It usually renders at the date header section of the Schedule where no time-cells are present.
                    These events are depicted in purple color.
                </td>
            </tr>
        </table>
    </div>
}