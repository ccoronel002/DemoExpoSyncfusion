@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.Schedule
@using Syncfusion.EJ2.DropDowns

@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("550px").Views(ViewBag.view).EventRendered("onEventRendered").EventSettings(new ScheduleEventSettings { DataSource = ViewBag.datasource }).WorkDays(ViewBag.workday).SelectedDate(new DateTime(2018, 2, 15)).Render()
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 30%">
                        <div>
                            Work days
                        </div>
                    </td>
                    <td style="width: 70%;">
                        <div>
                            <select id="scheduleworkdays" name="ddl-work-days">
                                <option value="1,3,5" selected="">Mon, Wed, Fri</option>
                                <option value="1,2,3,4,5">Mon, Tue, Wed, Thu, Fri</option>
                                <option value="2,3,4,5">Tue, Wed, Thu, Fri</option>
                                <option value="4,5,6,1,2">Thu, Fri, Sat, Mon, Tue</option>
                            </select>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 30%">
                        <div>
                            First day of week
                        </div>
                    </td>
                    <td style="width: 70%;">
                        <div>
                            @Html.EJS().DropDownList("scheduledayofweek").Value("0").PopupHeight("250px").DataSource(ViewBag.dayOfWeek).Fields(new DropDownListFieldSettings { Text = "Name", Value = "Value" }).Change("scheduleWeek").Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <script src="~/Scripts/schedule/applyCategoryColor.js"></script>
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            var workDaysDropDown = new ej.dropdowns.DropDownList({
                popupWidth: 180,
                change: onChange
            });
            workDaysDropDown.appendTo('#scheduleworkdays');
        })
        function scheduleWeek(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            scheduleObj.firstDayOfWeek = parseInt(args.value, 10);
            scheduleObj.dataBind();
        }
        function onChange(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            scheduleObj.workDays = args.value.toString().split(',').map(Number);
            scheduleObj.dataBind();
        }
        function onEventRendered(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            applyCategoryColor(args, scheduleObj.currentView);
        }
    </script>
}
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo showcases how to set customized working days as well as first day of a week on Schedule.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this demo, the working days of a week can be set on Schedule using the
            <code>WorkDays</code> property which accepts the collection of day indexes (from 0 to 6) of a week. By default, it is set to
            <code>[1, 2, 3, 4, 5]</code> and in this demo, it has been set to
            <code>[1, 3, 5]</code> which means that
            <code>Monday, Wednesday, Friday</code> is being set as working days of a week and is visually differentiated from non-working days. The working hours usually
            applies only on these given working days.
        </p>
        <p>
            The first day of the week can also be set on the Schedule by making use of the
            <code>FirstDayOfWeek</code> property, doing so which will make the Schedule to start with that day.
        </p>
        <p>
            <strong>Note: </strong> Here, Sunday is always denoted as 0, Monday as 1 and so on.
        </p>
    </div>
}