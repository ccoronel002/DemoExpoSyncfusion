@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.Schedule
@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("550px").Views(ViewBag.view).ActionComplete("onActionComplete").ActionBegin("onActionBegin").EventRendered("onEventRendered").EventSettings(new ScheduleEventSettings { DataSource = ViewBag.datasource }).SelectedDate(new DateTime(2018, 2, 15)).Render()
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 90%">
                        <div>
                            @Html.EJS().CheckBox("headerbar").Change("onChange").Checked(true).Label("Show/Hide Header bar").Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <style>
        .e-schedule .e-schedule-toolbar .user-icon {
            background-image: url('./content/schedule/images/nancy.png');
            background-position: center center;
            background-repeat: no-repeat;
            background-size: cover;
            border-radius: 50%;
            height: 24px;
            min-width: 24px !important;
            width: 24px !important;
        }

        .e-schedule .e-schedule-toolbar .e-toolbar-items span.e-btn-icon.user-icon.e-icons {
            line-height: 24px !important;
            min-height: 24px !important;
        }

        .e-schedule .e-schedule-toolbar .e-toolbar-items .e-schedule-user-icon .e-tbar-btn:hover {
            background-color: inherit;
        }

        .e-schedule .e-schedule-toolbar .e-toolbar-items .e-schedule-user-icon .e-tbar-btn-text {
            display: none;
        }

        .e-schedule .e-schedule-toolbar .e-toolbar-pop .e-schedule-user-icon .e-tbar-btn-text {
            padding-left: 8px !important;
        }

        .e-profile-wrapper {
            width: 210px;
            height: 80px;
            background-color: #fafafa;
            box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .e-profile-wrapper .profile-container {
            display: flex;
            padding: 10px;
        }

        .e-profile-wrapper .profile-image {
            background-image: url('./content/schedule/images/nancy.png');
            background-position: center center;
            background-repeat: no-repeat;
            background-size: cover;
            border-radius: 50%;
            box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0, 0, 0, 0.2);
            width: 60px;
            height: 60px;
        }

        .e-profile-wrapper .content-wrap {
            padding-left: 10px;
        }

        .e-profile-wrapper .name {
            font-size: 14px;
            line-height: 20px;
            font-weight: 500;
            margin-top: 2px;
        }

        .e-profile-wrapper .destination {
            font-size: 12px;
        }

        .e-profile-wrapper .status-icon {
            height:6px;
            width:6px;
            background:green;
            border-radius:100%;
            float:left;
            margin-right:4px;
            margin-top:4px;
        }

        .e-profile-wrapper .status {
            font-size: 11px;
        }
    </style>
    <script src="~/Scripts/schedule/applyCategoryColor.js"></script>
    <script type="text/javascript">
        var profilePopup;
        function onActionBegin(args) {
            if (args.requestType === 'toolbarItemRendering') {
                var userIconItem = {
                    align: 'Right', prefixIcon: 'user-icon', text: 'Nancy', cssClass: 'e-schedule-user-icon'
                };
                args.items.push(userIconItem);
            }
        }
        function onActionComplete(args) {
            var scheduleElement = document.getElementById('schedule');
            if (args.requestType === 'toolBarItemRendered') {
                var userIconEle = scheduleElement.querySelector('.e-schedule-user-icon');
                userIconEle.onclick = function () {
                    profilePopup.relateTo = userIconEle;
                    profilePopup.dataBind();
                    if (profilePopup.element.classList.contains('e-popup-close')) {
                        profilePopup.show();
                    } else {
                        profilePopup.hide();
                    }
                };
            }
            var userContentEle = ej.base.createElement('div', {
                className: 'e-profile-wrapper'
            });
            scheduleElement.parentElement.appendChild(userContentEle);

            var userIconEle = scheduleElement.querySelector('.e-schedule-user-icon');
            var getDOMString = ej.base.compile('<div class="profile-container"><div class="profile-image">' +
                '</div><div class="content-wrap"><div class="name">Nancy</div>' +
                '<div class="destination">Product Manager</div><div class="status">' +
                '<div class="status-icon"></div>Online</div></div></div>');
            var output = getDOMString({});
            profilePopup = new ej.popups.Popup(userContentEle, {
                content: output[0],
                relateTo: userIconEle,
                position: { X: 'left', Y: 'bottom' },
                collision: { X: 'flip', Y: 'flip' },
                targetType: 'relative',
                viewPortElement: scheduleElement,
                width: 210,
                height: 80
            });
            profilePopup.hide();
        }
        function onChange(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            profilePopup.hide();
            scheduleObj.showHeaderBar = args.checked;
            scheduleObj.dataBind();
        }
        function onEventRendered(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            applyCategoryColor(args, scheduleObj.currentView);
        }
    </script>

}
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo shows the way of adding custom items into the Schedule header bar. Here, an employee image is added to the
            header bar, clicking on which will open the popup showing that person's short profile information.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this demo, a popup has been designed separately with a personâ€™s profile info and kept in a hidden state initially. A custom
            item has been added to the Schedule header bar within the
            <code>ActionBegin</code> event by checking for the request type as
            <code>ToolbarItemRendering</code> which triggers at the time of header bar items rendering on the Schedule.
        </p>
        <p>
            Once the items are added, the click action is being bound to it in the
            <code>ActionComplete</code> event by checking for the request type as
            <code>ToolbarItemRendered</code> which triggers after the items are rendered on the Schedule. The appropriate action of showing or hiding the popup
            on clicking the custom item has been done within it.
        </p>
        <p>
            In case, if the header bar of Schedule needs to be hidden, it can be done by setting false to
            <code>ShowHeaderBar</code> property.
        </p>
    </div>
}