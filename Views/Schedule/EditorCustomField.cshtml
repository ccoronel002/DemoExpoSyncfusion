@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.Schedule
@using Syncfusion.EJ2.DropDowns
@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("550px").EventRendered("onEventRendered").EventSettings(new ScheduleEventSettings { DataSource = ViewBag.datasource }).PopupOpen("onPopupOpen").SelectedDate(new DateTime(2018, 2, 15)).Render()
        </div>
    </div>
    <style>
        .custom-field-row {
            margin-bottom: 20px;
        }
    </style>
    <script src="~/Scripts/schedule/applyCategoryColor.js"></script>
    <script type="text/javascript">
        function onPopupOpen(args) {
            if (args.type === 'Editor') {
                // Create required custom elements in initial time
                if (!args.element.querySelector('.custom-field-row')) {
                    var row = ej.base.createElement('div', { className: 'custom-field-row' });
                    var formElement = args.element.querySelector('.e-schedule-form');
                    formElement.firstChild.insertBefore(row, args.element.querySelector('.e-title-location-row'));
                    var container = ej.base.createElement('div', { className: 'custom-field-container' });
                    var inputEle = ej.base.createElement('input', {
                        className: 'e-field', attrs: { name: 'EventType' }
                    });
                    container.appendChild(inputEle);
                    row.appendChild(container);
                    var drowDownList = new ej.dropdowns.DropDownList({
                        dataSource: [
                            { text: 'Public Event', value: 'public-event' },
                            { text: 'Maintenance', value: 'maintenance' },
                            { text: 'Commercial Event', value: 'commercial-event' },
                            { text: 'Family Event', value: 'family-event' }
                        ],
                        fields: { text: 'text', value: 'value' },
                        value: (args.data).EventType,
                        floatLabelType: 'Always', placeholder: 'Event Type'
                    });
                    drowDownList.appendTo(inputEle);
                    inputEle.setAttribute('name', 'EventType');
                }
            }
        }

        function onEventRendered(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            applyCategoryColor(args, scheduleObj.currentView);
        }
    </script>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo shows how to add additional fields to the default editor window. Here, an additional field
            <code>Event Type</code> has been added to the default event editor and its value is processed accordingly.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this demo, the additional field is added to the default event editor by making use of the
            <code>PopupOpen</code> event which gets triggered before the event editor getting opened on Schedule.
            <code>PopupOpen</code> is a client-side event that triggers before any of the popups getting opened on Schedule.
        </p>
        <p>
            Here, the additional field (any of the form elements) is needed to be provided with the common class
            <code>e-field</code>, so as to handle and process those additional data into the default event object.
        </p>
    </div>
}