@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.Schedule
@{
    var agendaEventTemplate = "<div class='subject'>${Subject}</div>${if(Description !== null && Description !== undefined)}<div class='group'>${Description}</div>${/if}<div class='location'>${getTimeString(data.StartTime)}, ${if(City !== null && City !== undefined)}${City}${/if}</div>";
    var monthEventTemplate = "<div class='subject'>${Subject}</div>";
    List<ScheduleViewsModel> viewOptions = new List<ScheduleViewsModel>();
    viewOptions.Add(new ScheduleViewsModel { Option = Syncfusion.EJ2.Schedule.View.Day, StartHour = "07:00", EndHour = "18:00"  });
    viewOptions.Add(new ScheduleViewsModel { Option = Syncfusion.EJ2.Schedule.View.Week, StartHour = "09:00", EndHour = "19:00", ShowWeekend = false, TimeScale = new ScheduleTimeScale() { Interval = 60, SlotCount = 4 } });
    viewOptions.Add(new ScheduleViewsModel { Option = Syncfusion.EJ2.Schedule.View.Month, Group = new ScheduleGroup() { Resources = new string[] { "Owners" } }, EventTemplate = monthEventTemplate });
    viewOptions.Add(new ScheduleViewsModel { Option = Syncfusion.EJ2.Schedule.View.Agenda, EventTemplate = agendaEventTemplate });
}
@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("550px").Resources(res =>
       {
           res.Field("GroupId").Title("Owner").Name("Owners").DataSource(ViewBag.resourceData).TextField("GroupText").IdField("GroupId").ColorField("GroupColor").Add();
       }).Views(viewOptions).CurrentView(View.Month).EventRendered("onEventRendered").EventRendered("onEventRendered").EventSettings(new ScheduleEventSettings { DataSource = ViewBag.datasource }).SelectedDate(new DateTime(2018, 6, 20)).Render()
        </div>
    </div>
    <style>
        .e-schedule .e-agenda-view .e-appointment .subject {
            font-size: 14px;
        }

        .e-schedule .e-agenda-view .e-appointment .group {
            font-size: 12px;
            font-weight: 500;
        }

        .e-schedule .e-month-view .e-appointment .e-appointment-details {
            padding: 1px;
            padding-left: 3px;
        }
        
        .e-schedule .e-agenda-view .e-appointment .location {
            font-size: 12px;
        }

        .e-schedule .e-date-header-wrap .e-resource-cells {
            font-weight: 500;
        }
    </style>
    <script src="~/Scripts/schedule/applyCategoryColor.js"></script>
    <script type="text/javascript">
        window.getTimeString = function (value) {
            var instance = new ej.base.Internationalization();
            return instance.formatDate(value, { skeleton: 'Hm' });
        };

        function onEventRendered(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            applyCategoryColor(args, scheduleObj.currentView);
        }
    </script>
}

}
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo illustrates how to customize each view with specific configurations like applying event template on agenda view,
            setting different start/end hour to day and week views and enabling grouping in month view. It also shows how to
            hide the weekend days and to set different time intervals on week view.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            In this demo, the
            <code>Views</code> property is defined to accept the array of view options and therefore for each view, it is possible to set different
            configurations. In day view, the
            <code>StartHour</code> is set to 7 and
            <code>EndHour</code> set to 18 whereas in week view, the same is set as 9 and 19 respectively. Also, the
            <code>ShowWeekend</code> property is set to false only on week view along with different timescale interval. The customized template is applied
            to the events on Agenda view and on month view, the grouping functionality is enabled by setting
            <code>Group</code> property.
        </p>
    </div>
}