@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <div class="col-md-8 control-section">
    <div class="content-wrapper">
        @Html.EJS().CircularGauge("container").Load("onGaugeLoad").Axes(axes => axes
   .Radius("75%").StartAngle(210).EndAngle(150).LabelStyle(new CircularGaugeLabel
   {
       Position = Position.Outside,
       AutoAngle = true,
       Font = new CircularGaugeFont { Size = "10px", Color = "#333333", Opacity = 1 },
   })
   .Pointers(ViewBag.Pointers)
   .Annotations(ViewBag.Annotations)
   .Ranges(ViewBag.ranges)
   .Maximum(180).Minimum(0)
   .LineStyle(new CircularGaugeLine { Width = 2, Color = "#9E9E9E" })
   .MinorTicks(new CircularGaugeTick { Position = Position.Inside, Color = "#757575", Height = 5, Width = 2, Interval = 10 })
   .MajorTicks(new CircularGaugeTick { Position = Position.Inside, Color = "#757575", Width = 2, Height = 10, Interval = 20 }).Add()
   ).Render();
    </div>
</div>
<div class="col-md-4 property-section">
    <table id="property" title="Properties" style="width: 100%; margin:10px">
        <tbody>
            <tr>
                <td>
                    <div> Ticks </div>
                </td>
                <td>
                    <div>
                        <select id="Ticks" class="form-control" style="width:90%">
                            <option value="major" selected="true">Major Ticks</option>
                            <option value="minor">Minor Ticks</option>
                        </select>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div> Tick Position </div>
                </td>
                <td>
                    <div>
                        <select id="tickposition" class="form-control" style="width:90%">
                            <option value="Inside" selected="true">Inside</option>
                            <option value="Outside">Outside</option>
                        </select>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div> Label Position </div>
                </td>
                <td>
                    <div>
                        <select id="labelposition" class="form-control" style="width:90%">
                            <option value="Outside">Outside</option>
                            <option value="Inside">Inside</option>
                        </select>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div id="offset">Tick Offset <span>&nbsp;&nbsp;&nbsp;0</span> </div>
                </td>
                <td>
                    <div>
                        <input type="range" id="tickOffset" value="0" min="0" max="50" style="width:90%">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div id="height">Tick Height <span>&nbsp;&nbsp;&nbsp;10</span> </div>
                </td>
                <td>
                    <div>
                        <input type="range" id="tickHeight" value="10" min="1" max="50" style="width:90%">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div id="labelOffsetValue">Label Offset <span>&nbsp;&nbsp;&nbsp;0</span> </div>
                </td>
                <td>
                    <div>
                        <input type="range" id="labelOffset" value="0" min="0" max="50" style="width:90%">
                    </div>
                </td>
            </tr>
        </tbody>

    </table>
</div>
    <script type="text/javascript">
        var circulargauge;
        function onGaugeLoad(sender) {
            if (window.gaugeLoaded)
                return;
            window.gaugeLoaded = true;
            window.setTimeout(function () {
                var gaugeWidth = document.getElementById('container').offsetWidth;
                var svgWidth = document.getElementById('container_svg').offsetWidth;
                if (gaugeWidth != svgWidth)
                    sender.gauge.refresh();
            }, 200);
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            circulargauge = sender.gauge;
            for (var i = 0; i < sender.gauge.axes[0].annotations.length; i++) {
                sender.gauge.axes[0].annotations[i].zIndex = "1";
            }            
        }
        var ticks;
        var tickPosition;
        var labelPosition;
        var isMajorTicks = true;
        ticks = new ej.dropdowns.DropDownList({
            index: 0, width: 120,
            change: function () {
                var value = ticks.value.toString();
                var tick;
                isMajorTicks = value === 'major';
                if (isMajorTicks) {
                    tick = circulargauge.axes[0].majorTicks;
                }
                else {
                    tick = circulargauge.axes[0].minorTicks;
                }
                tickPosition.value = tick.position;
                document.getElementById('tickOffset').value = tick.offset.toString();
                document.getElementById('tickHeight').value = tick.height.toString();
                document.getElementById('offset').innerHTML = 'Tick Offset <span>   ' + tick.offset;
                document.getElementById('height').innerHTML = 'Tick Height <span>   ' + tick.height;
            }
        });
        ticks.appendTo('#Ticks');
        tickPosition = new ej.dropdowns.DropDownList({
            index: 0, width: 120,
            change: function () {
                var value = tickPosition.value.toString();
                if (isMajorTicks) {
                    circulargauge.axes[0].majorTicks.position = value;
                }
                else {
                    circulargauge.axes[0].minorTicks.position = value;
                }
                circulargauge.refresh();
            }
        });
        tickPosition.appendTo('#tickposition');
        labelPosition = new ej.dropdowns.DropDownList({
            index: 0, width: 120,
            change: function () {
                circulargauge.axes[0].labelStyle.position = labelPosition.value.toString();
                circulargauge.refresh();
            }
        });
        labelPosition.appendTo('#labelposition');
        document.getElementById('tickOffset').onpointermove = document.getElementById('tickOffset').ontouchmove =
            document.getElementById('tickOffset').onchange = function () {
                var value = parseInt(document.getElementById('tickOffset').value, 10);
                if (isMajorTicks) {
                    circulargauge.axes[0].majorTicks.offset = value;
                }
                else {
                    circulargauge.axes[0].minorTicks.offset = value;
                }
                document.getElementById('offset').innerHTML = 'Tick Offset <span>   ' + value;
                circulargauge.refresh();
            };
        document.getElementById('tickHeight').onpointermove = document.getElementById('tickHeight').ontouchmove =
            document.getElementById('tickHeight').onchange = function () {
                var value = parseInt(document.getElementById('tickHeight').value, 10);
                if (isMajorTicks) {
                    circulargauge.axes[0].majorTicks.height = value;
                }
                else {
                    circulargauge.axes[0].minorTicks.height = value;
                }
                document.getElementById('height').innerHTML = 'Tick Height <span>   ' + value;
                circulargauge.refresh();
            };
        document.getElementById('labelOffset').onpointermove = document.getElementById('labelOffset').ontouchmove =
            document.getElementById('labelOffset').onchange = function () {
                var value = parseInt(document.getElementById('labelOffset').value, 10);
                circulargauge.axes[0].labelStyle.offset = value;
                document.getElementById('labelOffsetValue').innerHTML = 'Label Offset <span>   ' + value;
                circulargauge.refresh();
            };
    </script>
}

@section ActionDescription{
<div id="action-description">
    <p>
        This sample illustrates how to customize the ticks and labels of an axis.
        Position, offset, and height of the tick and label can be changed by using the options provided in the property panel.
    </p>
</div>
}
@section Description{
<div id="description">
    <p>
        In this example, you can see how to render and configure the ticks and labels of an axis in the circular gauge. Labels are
        units that are used to display the values in the axis. You can customize <code>labels</code> with the properties
        like <code>angle</code>, <code>font</code>,
        <code>position</code>, etc. Ticks are used to mark some values on the axis. You can also customize the ticks using
        <code>majorTicks</code>,
        <code>minorTicks</code> properties.
    </p>
    <p>
        More information on the labels can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation section</a>.
    </p>
</div>
}






