@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <style>
        #templateWrap img {
            width: 16px;
            height: 16px;
            margin-top: 4px;
        }

        #templateWrap .des {
            float: right;
            padding-left: 5px;
        }
    </style>
    <script id='germany' type="text/x-template">
        <div id='templateWrap'>
            <img src="@Url.Content("Content/CircularGauge/Images/positive.png")" />
            <div class='des'>
                <div style="color:#424242;font-size:20px;font-family:Roboto">${pointers[0].value}%</div>
            </div>
        </div>
    </script>
    <script id='usa' type="text/x-template">
        <div id='templateWrap'>
            <img src="@Url.Content("Content/CircularGauge/Images/positive.png")" />
            <div class='des'>
                <div style="color:#424242;font-size:20px;font-family:Roboto">${pointers[0].value}%</div>
            </div>
        </div>
    </script>
    <script id='uk' type="text/x-template">
        <div id='templateWrap'>
            <img src="@Url.Content("Content/CircularGauge/Images/negative.png")" />
            <div class='des'>
                <div style="color:#424242;font-size:20px;font-family:Roboto">${pointers[0].value}%</div>
            </div>
        </div>
    </script>
    <div class="control-section">
        <div class="row">
            <div class="col-md-4">
                <div id="container1" style="height:250px;">
                    @Html.EJS().CircularGauge("container1").Load("onGaugeLoad").Axes(axes => axes
     .StartAngle(230).EndAngle(130).MajorTicks(new CircularGaugeTick { Width = 0, Color = "transparent" }).LineStyle(new CircularGaugeLine{ Width = 0, Color = "transparent" }).MinorTicks(new CircularGaugeTick{ Width = 0, Color = "transparent" })
     .LabelStyle(new CircularGaugeLabel{ Font = new CircularGaugeFont{ Size = "0px" } }).Radius("90%")
     .Ranges(new List<Syncfusion.EJ2.CircularGauge.CircularGaugeRange>{
                               new Syncfusion.EJ2.CircularGauge.CircularGaugeRange
                               {
                                   Start = 0 , End = 50, StartWidth = "15", EndWidth = "15",Color = "#EC121C"
                               },
                               new Syncfusion.EJ2.CircularGauge.CircularGaugeRange
                               {
                                   Start = 50, End = 100, StartWidth ="15", EndWidth = "15", Color = "#45EA0C"
                               }
                            })
     .Pointers(new List<Syncfusion.EJ2.CircularGauge.CircularGaugePointer>
                            {
                               new Syncfusion.EJ2.CircularGauge.CircularGaugePointer
                               {
                                   Value = 75, Radius = "60%", Animation = new CircularGaugeAnimation{ Enable=false },
                                   PointerWidth = 5, Cap = new CircularGaugeCap{ Radius = 3,  Border = new CircularGaugeBorder{ Width = 0 }, Color= "#777777"},
                                   NeedleTail = new CircularGaugeNeedleTail { Length = "25%" }
                               }
                            })
     .Annotations(
         new List<Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation>
                                {
                                   new Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation
                                   {
                                       Content = "#germany", Angle = 180,ZIndex = "1",Radius = "30%"
                                   },
                                   new Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation
                                   {
                                       Content = "<div style=color:#9E9E9E;font-size:16px;font-family:Roboto>Germany</div>",
                                       Angle =180,ZIndex = "1", Radius = "65%"
                                   }
                                })
     .Add()).Render()
                </div>
            </div>
            <div class="col-md-4">
                <div id="container2" style="height:250px;">
                    @Html.EJS().CircularGauge("container2").Load("onGaugeLoad").Axes(axes => axes
      .StartAngle(230).EndAngle(130).MajorTicks(new CircularGaugeTick{ Width = 0, Color = "transparent" }).LineStyle(new CircularGaugeLine{ Width = 0, Color = "transparent" }).MinorTicks(new CircularGaugeTick{ Width = 0, Color = "transparent" })
      .LabelStyle(new CircularGaugeLabel{ Font = new CircularGaugeFont{ Size = "0px" } }).Radius("90%")
      .Ranges(new List<Syncfusion.EJ2.CircularGauge.CircularGaugeRange>{
                               new Syncfusion.EJ2.CircularGauge.CircularGaugeRange
                               {
                                   Start = 0 , End = 50, StartWidth = "15", EndWidth = "15",Color = "#EC121C"
                               },
                               new Syncfusion.EJ2.CircularGauge.CircularGaugeRange
                               {
                                   Start = 50, End = 100, StartWidth ="15", EndWidth = "15", Color = "#45EA0C"
                               }
                            })
      .Pointers(new List<Syncfusion.EJ2.CircularGauge.CircularGaugePointer>
                            {
                               new Syncfusion.EJ2.CircularGauge.CircularGaugePointer
                               {
                                   Value = 75, Radius = "60%", Animation = new CircularGaugeAnimation{ Enable=false },
                                   PointerWidth = 5, Cap = new CircularGaugeCap { Radius = 3,Border = new CircularGaugeBorder{ Width = 0 } ,Color= "#777777" },
                                   NeedleTail = new CircularGaugeNeedleTail{ Length = "25%" }
                               }
                            })
      .Annotations(
          new List<Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation>
                                {
                                   new Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation
                                   {
                                       Content = "#usa", Angle = 180,ZIndex = "1",Radius = "30%"
                                   },
                                   new Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation
                                   {
                                       Content = "<div style=color:#9E9E9E;font-size:16px;font-family:Roboto>USA</div>",
                                       Angle =180,ZIndex = "1", Radius = "65%"
                                   }
                                })
      .Add()).Render()
                </div>
            </div>
            <div class="col-md-4">
                <div id="container3" style="height:250px;margin-left:-30px;">
                    @Html.EJS().CircularGauge("container3").Load("onGaugeLoad").Axes(axes => axes
     .StartAngle(230).EndAngle(130).MajorTicks(new CircularGaugeTick{ Width = 0, Color = "transparent" }).LineStyle(new CircularGaugeLine{ Width = 0, Color = "transparent" }).MinorTicks(new CircularGaugeTick{ Width = 0, Color = "transparent" })
     .LabelStyle(new CircularGaugeLabel{ Font = new CircularGaugeFont { Size = "0px" } }).Radius("90%")
     .Ranges(new List<Syncfusion.EJ2.CircularGauge.CircularGaugeRange>{
                               new Syncfusion.EJ2.CircularGauge.CircularGaugeRange
                               {
                                   Start = 0 , End = 50, StartWidth = "15", EndWidth = "15",Color = "#EC121C"
                               },
                               new Syncfusion.EJ2.CircularGauge.CircularGaugeRange
                               {
                                   Start = 50, End = 100, StartWidth ="15", EndWidth = "15", Color = "#45EA0C"
                               }
                            })
     .Pointers(new List<Syncfusion.EJ2.CircularGauge.CircularGaugePointer>
                            {
                               new Syncfusion.EJ2.CircularGauge.CircularGaugePointer
                               {
                                   Value = 75, Radius = "60%", Animation = new CircularGaugeAnimation{ Enable=false },
                                   PointerWidth = 5, Cap = new CircularGaugeCap{ Radius = 3, Border = new CircularGaugeBorder{ Width = 0 }, Color= "#777777"},
                                   NeedleTail = new CircularGaugeNeedleTail{ Length = "25%" }
                               }
                            })
     .Annotations(
         new List<Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation>
                                {
                                   new Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation
                                   {
                                       Content = "#uk", Angle = 180,ZIndex = "1",Radius = "30%"
                                   },
                                   new Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation
                                   {
                                       Content = "<div style=color:#9E9E9E;font-size:16px;font-family:Roboto>UK</div>",
                                       Angle =180,ZIndex = "1", Radius = "65%"
                                   }
                                })
     .Add()).Render()
                </div>
            </div>
        </div>
        <div class="row">
            <div id="container5">
                @{ var OrderData = new[] { new { Country = "Germany", Sales = 500, Target = 400, vsTarget = 300 }, new { Country = "USA", Sales = 1000, Target = 600, vsTarget = 360 }, new { Country = "UK", Sales = 600, Target = 700, vsTarget = -100 } };}
                @Html.EJS().Grid("container5").DataSource(OrderData).Columns(new List<Syncfusion.EJ2.Grids.GridColumn>
                       {
                           new Syncfusion.EJ2.Grids.GridColumn
                           {
                               Field = "Country", HeaderText = "Country", Width = "80"
                           },
                            new Syncfusion.EJ2.Grids.GridColumn
                           {
                               Field = "Sales", HeaderText = "Sales $", Width = "80"
                           },
                             new Syncfusion.EJ2.Grids.GridColumn
                           {
                               Field = "Target", HeaderText = "Target $", Width = "80"
                           },
                              new Syncfusion.EJ2.Grids.GridColumn
                           {
                               Field = "vsTarget", HeaderText = "vs Target", Width = "80"
                           }
                       }).Render()
            </div>
        </div>
    </div>
    <script type="text/javascript">
        function onGaugeLoad(sender) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            for (var i = 0; i < sender.gauge.axes[0].annotations.length; i++) {
                sender.gauge.axes[0].annotations[i].zIndex = "1";
            }
        }

        var interval = setInterval(function () {
            if (document.getElementById('container1_svg')) {
                var germany = document.getElementById("container1").ej2_instances[0];
                var usa = document.getElementById("container2").ej2_instances[0];
                var uk = document.getElementById("container3").ej2_instances[0];
                var value1 = Math.round(Math.random() * (90 - 55) + 55);
                var value2 = Math.round(Math.random() * (75 - 60) + 60);
                var value3 = Math.round(Math.random() * (40 - 10) + 10);
                var gridData1 = 4 * value1;
                var gridData2 = 6 * value2;
                var gridData3 = 7 * value3;
                var orderData = [
                    {
                        'Country': 'Germany',
                        'Sales': 500,
                        'Target': 400,
                        'vsTarget': gridData1
                    }, {
                        'Country': 'USA',
                        'Sales': 1000,
                        'Target': 600,
                        'vsTarget': gridData2
                    }, {
                        'Country': 'UK',
                        'Sales': 600,
                        'Target': 700,
                        'vsTarget': -gridData3
                    }
                ];
                var grid = document.querySelector(".e-grid").ej2_instances[0];
                var data = new ej.data.DataManager(orderData).executeLocal(new ej.data.Query().take(3));
                grid.dataSource = data;
                grid.refresh();
                germany.axes[0].pointers[0].animation.enable = true;
                usa.axes[0].pointers[0].animation.enable = true;
                uk.axes[0].pointers[0].animation.enable = true;
                germany.setPointerValue(0, 0, value1);
                usa.setPointerValue(0, 0, value2);
                uk.setPointerValue(0, 0, value3);
                germany.setAnnotationValue(0, 0, '#germany');
                usa.setAnnotationValue(0, 0, '#usa');
                uk.setAnnotationValue(0, 0, '#uk');
            } else {
                clearInterval(interval);
            }
        },
            2000);
    </script>
}


@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the live data sample in circular gauge.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            Pointer values in the gauge can be updated dynamically by using <code>setPointerValue</code> method.
            In this example, a stock price changes over the countries, are showed by using a gauge.
        </p>
        <p>
            More information on the gauge and its methods can be found in can be found in this
            <a target="_blank" href="http://ej2.syncfusion.com/documentation"> documentation section</a>.
        </p>
    </div>
}

