@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <div class="col-md-8 control-section">
        <div class="content-wrapper">
            @Html.EJS().CircularGauge("range-container").Load("onGaugeLoad").Axes(axes => axes
   .Radius("80%").StartAngle(230).EndAngle(130).LabelStyle(new CircularGaugeLabel
   {
       Position = Position.Inside,
       UseRangeColor = false,
       Font = new CircularGaugeFont { Size = "12px", Color = "#424242", FontFamily = "Roboto", FontStyle = "Regular", Opacity = 1 },
   }).Pointers(ViewBag.Pointers).Ranges(ViewBag.Ranges)
   .Annotations(ViewBag.Annotations)
   .StartAngle(210).EndAngle(150).Minimum(0).Maximum(120).Radius("80%")
   .LineStyle(new CircularGaugeLine{ Width = 10, Color = "transparent" })
   .MinorTicks(new CircularGaugeTick { Height = 0, Width = 0, Color = "transparent" }).MajorTicks(new CircularGaugeTick { Height = 10, Offset = 5, Color = "#9E9E9E" }).Add()
   ).Render()
        </div>
    </div>
      <div class="col-md-4 property-section">
            <table id="property" title="Properties" style="width: 90%">
                <tbody>
                    <tr style="height: 50px">
                        <td>
                            <div> Select Range </div>
                        </td>
                        <td>
                            <div>
                                <select id="rangeSelect" class="form-control">
                                    <option value="0" selected="true">Low</option>
                                    <option value="1">Medium</option>
                                    <option value="2">High</option>
                                </select>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div id="rangeStart">Range Start <span> &nbsp;&nbsp;&nbsp;0</span> </div>
                        </td>
                        <td>
                            <div>
                                <input type="range" id="start" value="0" min="0" max="120" style="width:90%">
                            </div>
                        </td>
                    </tr>

                    <tr style="height: 50px">
                        <td>
                            <div id="rangeEnd">Range End <span> &nbsp;&nbsp;&nbsp;40</span> </div>
                        </td>
                        <td>
                            <div>
                                <input type="range" id="end" value="40" min="0" max="120" style="width:90%">
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div id="">Range Color</div>
                        </td>
                        <td>
                            <div>
                                <select id="rangeColor" class="form-control">
                                    <option value="#30B32D" selected="true">#30B32D</option>
                                    <option value="#FFDD00">#FFDD00</option>
                                    <option value="#F03E3E">#F03E3E</option>
                                </select>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td style="width: 20%">
                            <div id="enablePointer">Range Font Color</div>
                        </td>
                        <td style="width: 40%;">
                            <div>
                                <input type="checkbox" id="enable">
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div id="rangeStartWidth">Start Width <span> &nbsp;&nbsp;&nbsp;10</span> </div>
                        </td>
                        <td>
                            <div>
                                <input type="range" id="startWidth" value="10" min="0" max="30" style="width:90%">
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div id="rangeEndWidth">End Width <span> &nbsp;&nbsp;&nbsp;10</span> </div>
                        </td>
                        <td>
                            <div>
                                <input type="range" id="endWidth" value="10" min="0" max="30" style="width:90%">
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    <script type="text/javascript">
        var colortObj;
        var circulargauge;
        function onGaugeLoad(sender) {
            if (window.gaugeLoaded)
                return;
            window.gaugeLoaded = true;
            window.setTimeout(function () {
                var gaugeWidth = document.getElementById('range-container').offsetWidth;
                var svgWidth = document.getElementById('range-container_svg').offsetWidth;
                if (gaugeWidth != svgWidth)
                    sender.gauge.refresh();
            }, 200);
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            circulargauge = sender.gauge;
            for (var i = 0; i < sender.gauge.axes[0].annotations.length; i++) {
                sender.gauge.axes[0].annotations[i].zIndex = "1";
            }
        }
        var listObj = new ej.dropdowns.DropDownList({
            index: 0, width: 120,
            change: function () {
                var index = +listObj.value;
                colortObj.value = circulargauge.axes[0].ranges[index].color;
                (document.getElementById('endWidth')).value = circulargauge.axes[0].ranges[index].endWidth.toString();
                document.getElementById('rangeEndWidth').innerHTML = 'End Width <span>    ' +
                    circulargauge.axes[0].ranges[index].endWidth;
                (document.getElementById('startWidth')).value = circulargauge.axes[0].ranges[index].startWidth.toString();
                document.getElementById('rangeStartWidth').innerHTML = 'Start Width <span>    ' +
                    circulargauge.axes[0].ranges[index].startWidth;
                (document.getElementById('end')).value = circulargauge.axes[0].ranges[index].end.toString();
                document.getElementById('rangeEnd').innerHTML = 'Range End <span>    ' +
                    circulargauge.axes[0].ranges[index].end;
                (document.getElementById('start')).value = circulargauge.axes[0].ranges[index].start.toString();
                document.getElementById('rangeStart').innerHTML = 'Range Start <span>    ' +
                    circulargauge.axes[0].ranges[index].start;
            }
        });
        listObj.appendTo('#rangeSelect');

        colortObj = new ej.dropdowns.DropDownList({
            index: 0, width: 120,
            change: function () {
                circulargauge.axes[0].ranges[+listObj.value].color = colortObj.value.toString();
                circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();
            }
        });
        colortObj.appendTo('#rangeColor');

        document.getElementById('start').onpointermove = document.getElementById('start').ontouchmove =
            document.getElementById('start').onchange = function () {
                var min = parseInt((document.getElementById('start')).value, 10);
                document.getElementById('rangeStart').innerHTML = 'Range Start <span>    ' + min;
                circulargauge.axes[0].ranges[+listObj.value].start = min;
                circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();
            };

        document.getElementById('end').onpointermove = document.getElementById('end').ontouchmove =
            document.getElementById('end').onchange = function () {
                var max = parseInt((document.getElementById('end')).value, 10);
                document.getElementById('rangeEnd').innerHTML = 'Range End <span>    ' + max;
                circulargauge.axes[0].ranges[+listObj.value].end = max;
                circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();
            };

        document.getElementById('startWidth').onpointermove = document.getElementById('startWidth').ontouchmove =
            document.getElementById('startWidth').onchange = function () {
                var startWidth = parseInt((document.getElementById('startWidth')).value, 10);
                document.getElementById('rangeStartWidth').innerHTML = 'Start Width <span>    ' + startWidth;
                circulargauge.axes[0].ranges[+listObj.value].startWidth = startWidth;
                circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();
            };

        document.getElementById('endWidth').onpointermove = document.getElementById('endWidth').ontouchmove =
            document.getElementById('endWidth').onchange = function () {
                var endWidth = parseInt((document.getElementById('endWidth')).value, 10);
                document.getElementById('rangeEndWidth').innerHTML = 'End Width <span>    ' + endWidth;
                circulargauge.axes[0].ranges[+listObj.value].endWidth = endWidth;
                circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();
            };

        document.getElementById('enable').onchange = function () {
            var useRangeColor = (document.getElementById('enable')).checked;
            circulargauge.axes[0].labelStyle.useRangeColor = useRangeColor;
            circulargauge.axes[0].majorTicks.useRangeColor = useRangeColor;
            circulargauge.axes[0].minorTicks.useRangeColor = useRangeColor;
            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();
        };
    </script>
}

@section ActionDescription{
<div id="action-description">
    <p>
        This sample illustrates how to highlight a region in an axis by using ranges in gauge. Start, end, color, and width of the range can be changed by using the options provided
        in the property panel.
    </p>
</div>
}
@section Description{
<div id="description">
    <p>
        In this example, you can see how to customize the ranges of an axis in the circular gauge. Ranges are used to group the axis
        values, you can use <code>start</code>, <code>end</code>, <code>color</code>, <code>startWidth</code>, <code>endWidth</code>        and <code>radius</code> properties to customize the ranges. In this sample, an axis is shown with one range and options
        to customize the range properties with property panel.
    </p>
    <p>
        More information on the ranges can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation section</a>.
    </p>
</div>
}


