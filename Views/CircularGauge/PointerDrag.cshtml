
@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <div class="col-md-8 control-section">
        <div class="content-wrapper">
            @Html.EJS().CircularGauge("container").Load("onGaugeLoad").DragEnd("onDragEnd").DragMove("onDragMove").EnablePointerDrag(true).Axes(axes =>
         axes.EndAngle(140).StartAngle(220).LineStyle(new CircularGaugeLine { Width = 0, Color = "transparent" }).Radius("80%")
         .Minimum(0).Maximum(120).MajorTicks(new CircularGaugeTick{ UseRangeColor = true }).MinorTicks(new CircularGaugeTick{ UseRangeColor = true })
         .LabelStyle(new CircularGaugeLabel{ UseRangeColor = true }).Ranges(
             new List<Syncfusion.EJ2.CircularGauge.CircularGaugeRange> {
       new Syncfusion.EJ2.CircularGauge.CircularGaugeRange{
          Start = 0, End = 40 ,StartWidth ="8", EndWidth ="8",Radius = "108%",Color="#30B32D"
       },
        new Syncfusion.EJ2.CircularGauge.CircularGaugeRange{
          Start = 40, End = 100 ,StartWidth ="8", EndWidth ="8",Radius = "108%",Color="#E5C31C"
       },
        new Syncfusion.EJ2.CircularGauge.CircularGaugeRange{
          Start = 100, End = 120 ,StartWidth ="8", EndWidth ="8",Radius = "108%",Color="#F03E3E"
       }
             })
           .Pointers(
             new List<Syncfusion.EJ2.CircularGauge.CircularGaugePointer> {
       new Syncfusion.EJ2.CircularGauge.CircularGaugePointer
       {
           Type = Syncfusion.EJ2.CircularGauge.PointerType.Marker , Value = 70,MarkerShape = Syncfusion.EJ2.CircularGauge.GaugeShape.InvertedTriangle,
           Radius = "110%" , MarkerHeight = 20 ,Color="#E5C31C" , MarkerWidth=20
       },
        new Syncfusion.EJ2.CircularGauge.CircularGaugePointer
       {
           Value = 70, Radius = "60%" , Cap = new CircularGaugeCap{  Radius=10, Border = new CircularGaugeBorder{ Width=5, Color="#E5C31C" }  },
           NeedleTail = new CircularGaugeNeedleTail{ Length="0%", Color="#E5C31C" },
          Color="#E5C31C" , MarkerWidth=5
       }
             }).Annotations(
               new List<Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation>
               {
         new Syncfusion.EJ2.CircularGauge.CircularGaugeAnnotation
         {
             Content= "<div style=font-size: 14px; color:#E5C31C;font-weight: lighter;font-style: oblique;><span>70 MPH</span></div>",
             Angle = 180,
             ZIndex = "1",
             Radius = "45%"
         }
               }).Add()
         ).Render()
        </div>
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 30%">
                        <div id="pointerValue">Pointer Value <span> &nbsp;&nbsp;&nbsp;70</span> </div>
                    </td>
                    <td style="width: 40%;">
                        <div>
                            <input type="range" id="value" value="70" min="0" max="120" style="width:90%">
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 20%">
                        <div id="enablePointer">Enable Drag</div>
                    </td>
                    <td style="width: 40%;">
                        <div>
                            <input type="checkbox" id="enable" checked="true" style="width:90%">
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <script type="text/javascript">
        var content = '<div style="font-size: 14px;color:#E5C31C;font-weight: lighter;font-style: oblique;"><span>';
        var pointerValue;
        var circulargauge;
        function onGaugeLoad(sender) {
            if (window.gaugeLoaded)
                return;
            window.gaugeLoaded = true;
            window.setTimeout(function () {
                var gaugeWidth = document.getElementById('container').offsetWidth;
                var svgWidth = document.getElementById('container_svg').offsetWidth;
                if (gaugeWidth != svgWidth)
                    sender.gauge.refresh();
            }, 200);
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            circulargauge = sender.gauge;
            for (var i = 0; i < sender.gauge.axes[0].annotations.length; i++) {
                sender.gauge.axes[0].annotations[i].zIndex = "1";
            }

        }
        function onDragEnd(args) {
            pointerValue = Math.round(args.currentValue);
            setPointersValue(circulargauge, pointerValue);
        }

        function onDragMove(args) {
            pointerValue = Math.round(args.currentValue);
            document.getElementById('pointerValue').innerHTML = 'Pointer Value <span>    ' + pointerValue;
            document.getElementById('value').value = pointerValue.toString();
            circulargauge.setAnnotationValue(0, 0, content + pointerValue + ' MPH</span></div>');
        }

        function setPointersValue(circulargauge, pointerValue) {
            var color = ej.circulargauge.getRangeColor(pointerValue, (circulargauge.axes[0].ranges), circulargauge.axes[0].pointers[0].color);
            circulargauge.axes[0].pointers[0].color = color;
            circulargauge.axes[0].pointers[1].color = color;
            circulargauge.axes[0].pointers[0].animation.enable = true;
            circulargauge.axes[0].pointers[1].animation.enable = true;
            circulargauge.axes[0].pointers[0].needleTail.color = color;
            circulargauge.axes[0].pointers[1].needleTail.color = color;
            circulargauge.axes[0].pointers[0].cap.border.color = color;
            circulargauge.axes[0].pointers[1].cap.border.color = color;
            circulargauge.setPointerValue(0, 1, pointerValue);
            circulargauge.setPointerValue(0, 0, pointerValue);
            content = '<div style="font-size: 14px;color:' + color + ';font-weight: lighter;font-style: oblique;"><span>';
            circulargauge.setAnnotationValue(0, 0, content + pointerValue + ' MPH</span></div>');
        }
        document.getElementById('value').ontouchmove = document.getElementById('value').onpointermove =
            document.getElementById('value').onchange = function () {
                var pointerValue = parseInt(document.getElementById('value').value, 10);
                setPointersValue(circulargauge, pointerValue);
                document.getElementById('pointerValue').innerHTML = 'Pointer Value <span>    ' + pointerValue;
            };
        document.getElementById('enable').onchange = function () {
            var value = document.getElementById('enable').checked;
            circulargauge.enablePointerDrag = value;
        };


    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample visualizes pointer drag in circular gauge. Position of pointer value can be changed by using <code>Pointer Value</code> and we can drag the pointer by enabling drag option.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to move pointers in gauge using drag and drop. Use <code>enablePointerDrag</code>        property, to achieve this behavior.
        </p>
        <br>
        <p>
            In this sample, you can drag the pointer using mouse or touch, the pointer value will be updated in an annotation placed
            in the gauge.
        </p>
        <p>
            More information on the gauge can be found in this
            <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation section</a>.
        </p>
    </div>
}


