@using Syncfusion.EJ2
@section ControlsSection{
    <div class="control-section">
        @Html.EJS().LinearGauge("tooltipContainer").Width("80%").Resized("gaugeResized").Loaded("onGaugeLoaded").TooltipRender("onTooltipRendering").AxisLabelRender("onAxisLabelRendering").Load("onGaugeLoad").Container(new Syncfusion.EJ2.LinearGauge.LinearGaugeContainer {
       Width = 140, Border = new Syncfusion.EJ2.LinearGauge.LinearGaugeBorder { Width = 2, Color = "#a6a6a6" }
   }).Tooltip(new Syncfusion.EJ2.LinearGauge.LinearGaugeTooltipSettings { Enable = true, Fill= "#fffff", TextStyle=new Syncfusion.EJ2.LinearGauge.LinearGaugeFont { Color= "#fffff", Opacity=1 } }).Orientation(Syncfusion.EJ2.LinearGauge.Orientation.Horizontal).Axes(new List<Syncfusion.EJ2.LinearGauge.LinearGaugeAxis> {
       new Syncfusion.EJ2.LinearGauge.LinearGaugeAxis
       {
           Maximum = 10,
           Line = new Syncfusion.EJ2.LinearGauge.LinearGaugeLine { Offset = 140  },
           Pointers = new List<Syncfusion.EJ2.LinearGauge.LinearGaugePointer>
           {
               new Syncfusion.EJ2.LinearGauge.LinearGaugePointer
               {
                   Type = Syncfusion.EJ2.LinearGauge.Point.Bar, Value = 5.4, Offset = 15, Color = "#ff66b3"
               }
           },
           MajorTicks = new Syncfusion.EJ2.LinearGauge.LinearGaugeTick { Interval=1, Height=20 },
           MinorTicks = new Syncfusion.EJ2.LinearGauge.LinearGaugeTick { Interval = 0.2, Height=10 },
       },
         new Syncfusion.EJ2.LinearGauge.LinearGaugeAxis
       {
           Maximum = 25, OpposedPosition = true,
           Line = new Syncfusion.EJ2.LinearGauge.LinearGaugeLine { Offset = -140  },
           Pointers = new List<Syncfusion.EJ2.LinearGauge.LinearGaugePointer>
           {
               new Syncfusion.EJ2.LinearGauge.LinearGaugePointer
               {
                   Type = Syncfusion.EJ2.LinearGauge.Point.Bar, Value = 16.5, Offset = -15, Color = "#4d94ff"
               }
           },
           MajorTicks = new Syncfusion.EJ2.LinearGauge.LinearGaugeTick { Interval=1, Height=20 },
           MinorTicks = new Syncfusion.EJ2.LinearGauge.LinearGaugeTick { Interval = 0.2, Height=10 }
       }
   }).Annotations(new List<Syncfusion.EJ2.LinearGauge.LinearGaugeAnnotation> {
       new Syncfusion.EJ2.LinearGauge.LinearGaugeAnnotation
       {
           Content = "<div id=first><h1 style=font-size:15px>Inches</h1></div>",
           AxisValue =5.4,X =35, Y = -58
       },
       new Syncfusion.EJ2.LinearGauge.LinearGaugeAnnotation
       {
           Content = "<div id=second><h1 style=font-size:15px>Centimeters</h1></div>",
           AxisValue =16.5, X =50, Y = 52,
           AxisIndex = 1
       }
   }).Render();
    </div>

    <script type="text/javascript">
        var gauge;
        function onGaugeLoad(sender) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            gauge = sender.gauge;
            sender.gauge.orientation = "Horizontal";
            for (var i = 0; i < sender.gauge.annotations.length; i++) {
                sender.gauge.annotations[i].zIndex = "1";
            }
            var width = parseInt(((gauge.width, gauge.element.offsetWidth) || gauge.element.offsetWidth || 600), 10);
            if (width < 500) {
                gaugeMobileSize();
            }
            else {
                gaugeDesktopSize();
            }
        }

        function gaugeMobileSize() {
            gauge.axes[1].majorTicks.interval = 2;
            gauge.axes[1].minorTicks.interval = 1;
            gauge.orientation = 'Vertical';
            gauge.annotations[0].x = -57;
            gauge.annotations[0].y = -30;
            gauge.annotations[1].x = 50;
            gauge.annotations[1].y = -45;
        }
        function gaugeDesktopSize() {
            gauge.axes[1].majorTicks.interval = 1;
            gauge.axes[1].minorTicks.interval = 0.5;
            gauge.orientation = 'Horizontal';
            gauge.annotations[0].x = 35;
            gauge.annotations[0].y = -58;
            gauge.annotations[1].x = 50;
            gauge.annotations[1].y = 52;
        }

        function gaugeResized(args) {
            if (args.currentSize.width < 500) {
                gaugeMobileSize();
            }
            else {
                gaugeDesktopSize();
            }
        }

        function onAxisLabelRendering(args) {
            if (args.axis.visibleRange.min === args.value || args.axis.visibleRange.max === args.value) {
                args.text = '';
            }
        }

        function onTooltipRendering(args) {
            args.content = (args.axis.visibleRange.max === 25) ? args.content + ' cm' : args.content + ' in';
        }

        function onGaugeLoaded(args) {
            if (document.getElementById('tooltipContainer')) {
                if (args.gauge.availableSize.width < 500) {
                    document.getElementById('tooltipContainer_Annotation_0').style.transform = 'rotate(270deg)';
                    document.getElementById('tooltipContainer_Annotation_1').style.transform = 'rotate(270deg)';
                }
                else {
                    document.getElementById('tooltipContainer_Annotation_0').style.transform = '';
                    document.getElementById('tooltipContainer_Annotation_1').style.transform = '';
                }
            }
        }

    </script>
}

@section ActionDescription{
<div id="action-description">
    <p>
        This sample visualizes the tooltip for pointer in gauge. To see tooltip in action, hover pointer or tap the pointer.
    </p>
</div>
}
@section Description{
<div id="description">
    <p>
        This sample demonstrates the measuring scale by using the linear gauge. Tooltip is used to track the pointer value closer
        to the current mouse position or touch contact. You can show the tooltip for an individual marker or bar pointer
        by hover or tap on the pointer in touch enabled devices.
        <br>
    <p style="font-weight: 500">Injecting Module</p>
    <p>
        Linear gauge component features are segregated into individual feature-wise modules. To use tooltip, we need to inject <code>GaugeTooltip</code>module
        using <code>LinearGauge.Inject(GaugeTooltip)</code> method.
    </p>
    <p>
        More information about tooltip can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation section</a>.
    </p>
</div>

}






