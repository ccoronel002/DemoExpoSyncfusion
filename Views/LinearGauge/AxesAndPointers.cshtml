
@using Syncfusion.EJ2
@section ControlsSection{
    <div class="col-md-8 control-section">
    <div class="content-wrapper">
        @Html.EJS().LinearGauge("container").Load("onGaugeLoad").Width("80%").Orientation(Syncfusion.EJ2.LinearGauge.Orientation.Horizontal).Axes(new List<Syncfusion.EJ2.LinearGauge.LinearGaugeAxis> {
       new Syncfusion.EJ2.LinearGauge.LinearGaugeAxis
       {
           Pointers = new List<Syncfusion.EJ2.LinearGauge.LinearGaugePointer>
           {
               new Syncfusion.EJ2.LinearGauge.LinearGaugePointer
               {
                   Value = 10, Height=15,Width=15,Placement = Syncfusion.EJ2.LinearGauge.Placement.Near,Color="#757575",
                   Offset =30,MarkerType = Syncfusion.EJ2.LinearGauge.MarkerType.Triangle
               }
           },
           MajorTicks = new Syncfusion.EJ2.LinearGauge.LinearGaugeTick { Interval=10, Height=20 },
           MinorTicks = new Syncfusion.EJ2.LinearGauge.LinearGaugeTick { Interval = 2, Height=10 },
           LabelStyle = new Syncfusion.EJ2.LinearGauge.LinearGaugeLabel { Offset = 48 },
       }
   }).Annotations(new List<Syncfusion.EJ2.LinearGauge.LinearGaugeAnnotation> {
       new Syncfusion.EJ2.LinearGauge.LinearGaugeAnnotation
       {
           Content = "<div id=pointer style=width:70px><h1 style=font-size:14px;color:#424242>${axes[0].pointers[0].currentValue} MPH</h1></div>",
           AxisIndex = 0, AxisValue =10,X =10, Y = 60
       }
   }).Render();
    </div>
</div>
<div class="col-md-4 property-section">
    <table id="property" title="Properties" style="width: 100%;">
        <tbody>
            <tr>
                <td>
                    <div id="minValue">
                        Axis Minimum
                        <span>&nbsp;&nbsp;&nbsp;0</span>
                    </div>
                </td>
                <td>
                    <div>
                        <input type="range" step="5" id="min" value="0" min="0" max="100" style="width:90%;">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div id="maxValue">
                        Axis Maximum
                        <span>&nbsp;&nbsp;&nbsp;100</span>
                    </div>
                </td>
                <td>
                    <div>
                        <input type="range" step="5" id="max" value="100" min="0" max="100" style="width:90%;">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>Axis Inversed</div>
                </td>
                <td>
                    <div>
                        <input type="checkbox" id="axisInversed">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>Axis Opposed</div>
                </td>
                <td>
                    <div>
                        <input type="checkbox" id="opposed">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>Label Format</div>
                </td>
                <td>
                    <div class="e-float-input" style="margin-top: 0px;">
                        <input type="text" value="{value}" id="format" class="form-control" style="width:90%">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>Pointer type</div>
                </td>
                <td>
                    <div>
                        <select name="selectIndex" autocomplete="off" id="pointerType" class="form-control" style="width:90%">
                            <option value="Marker">Marker</option>
                            <option value="Bar">Bar</option>
                        </select>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>Marker Placement</div>
                </td>
                <td>
                    <div>
                        <select name="selectIndex" autocomplete="off" id="pointerPlace" class="form-control" style="width:90%">
                            <option value="Far">Far</option>
                            <option value="Near">Near</option>
                            <option value="Center">Center</option>
                        </select>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>
    <script type="text/javascript">
        var gauge;
        function onGaugeLoad(sender) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            sender.gauge.orientation = "Horizontal";
            for (var i = 0; i < sender.gauge.annotations.length; i++) {
                sender.gauge.annotations[i].zIndex = "1";
            }
            gauge = sender.gauge;
        }

        document.getElementById('opposed').onchange = function (sender) {
            var ele = document.getElementById('opposed');
            gauge.axes[0].opposedPosition = ele.checked;
            if (ele.checked) {
                gauge.axes[0].pointers[0].placement = 'Near';
                gauge.axes[0].pointers[0].markerType = 'Triangle';
                gauge.axes[0].pointers[0].offset = -20;
                gauge.axes[0].labelStyle.offset = 0;
                gauge.annotations[0].x = 10;
                gauge.annotations[0].y = -60;
            }
            else {
                gauge.axes[0].pointers[0].placement = 'Far';
                gauge.axes[0].pointers[0].offset = 0;
                gauge.axes[0].pointers[0].offset = 30;
                gauge.axes[0].pointers[0].markerType = 'InvertedTriangle';
                gauge.axes[0].labelStyle.offset = 38;
                gauge.annotations[0].x = 10;
                gauge.annotations[0].y = 60;
            }
            gauge.refresh();
        };
        document.getElementById('axisInversed').onchange = function (sender) {
            var ele = document.getElementById('axisInversed');
            gauge.axes[0].isInversed = ele.checked;
            gauge.refresh();
        };
        document.getElementById('min').ontouchmove = document.getElementById('min').onpointermove =
            document.getElementById('min').onchange = function () {
                var min = document.getElementById('min');
                var max = document.getElementById('max');
                gauge.axes[0].minimum = parseInt(min.value, 10);
                gauge.axes[0].maximum = parseInt(max.value, 10);
                document.getElementById('minValue').innerHTML = 'Axis Minimum <span>   ' + min.value;
                gauge.refresh();
                gauge.annotations[0].axisValue = gauge.axes[0].pointers[0].currentValue;
                gauge.refresh();
            };
        document.getElementById('max').ontouchmove = document.getElementById('max').onpointermove =
            document.getElementById('max').onchange = function () {
                var min = document.getElementById('min');
                var max = document.getElementById('max');
                gauge.axes[0].maximum = parseInt(max.value, 10);
                gauge.axes[0].minimum = parseInt(min.value, 10);
                document.getElementById('maxValue').innerHTML = 'Axis Maximum <span>   ' + max.value;
                gauge.refresh();
                gauge.annotations[0].axisValue = gauge.axes[0].pointers[0].currentValue;
                gauge.refresh();
            };
        document.getElementById('format').onchange = function () {
            var ele = document.getElementById('format');
            gauge.axes[0].labelStyle.format = ele.value.indexOf('{value}') > -1 ? ele.value : gauge.axes[0].labelStyle.format;
            gauge.refresh();
        };
        var pointerPlace = new ej.dropdowns.DropDownList({
            index: 0,
            placeholder: 'Select Range Bar Color',
            width: 120,
            change: function () {
                gauge.axes[0].pointers[0].placement = pointerPlace.value;
                gauge.refresh();
            }
        });
        pointerPlace.appendTo('#pointerPlace');
        var pointerType = new ej.dropdowns.DropDownList({
            index: 0,
            placeholder: 'Select Range Bar Color',
            width: 120,
            change: function () {
                gauge.axes[0].pointers[0].type = pointerType.value;
                pointerPlace.enabled = (pointerType.value === 'Marker');
                gauge.refresh();
            }
        });
        pointerType.appendTo('#pointerType');
    </script>
}


@section ActionDescription{
<div id="action-description">
    <p>
        This sample illustrates the axis and pointers feature in the linear gauge. Axis and pointers can be customized by using options available in the panel.
    </p>
</div>
}
@section Description{
<div id="description">
    <p>
        In this example, you can see how to customize the axes and pointers. Use
        <code>format</code> of labelStyle property to customize the axis labels and use
        <code>type</code>,
        <code>markerType</code> and
        <code>placement</code> properties to customize the pointers in linear gauge.
    </p>
    <br>
    <p>
        More information about axes can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation section</a>.
    </p>
</div>

}


