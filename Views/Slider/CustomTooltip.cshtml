@using Syncfusion.EJ2
@using Syncfusion.EJ2.Inputs
@using EJ2MVCSampleBrowser.Models
@section ControlsSection{
    <div class="slider-content-wrapper control-section">
        <div class="control-wrapper">
            <div class="sliderwrap">
                <label class="labeltext userselect">
                    <span class="label-text">Background color</span>
                </label>
                @Html.EJS().Slider("timeObj").Min(1373693400000).Max(1373736600000).Enabled(true).Created("createdTimeHandler").TooltipChange("tooltipChangeHandler").RenderingTicks("renderingTicksHandler").Tooltip(new SliderTooltipData { IsVisible = true, Placement = TooltipPlacement.Before, CssClass = "e-tooltip-cutomization"}).Ticks(new SliderTicksData { Placement = Placement.After, LargeStep = 3 * 3600000, SmallStep = 3600000, ShowSmallTicks = true }).Type(SliderType.Range).Value(ViewBag.timeValue).Render()
            </div>
            <div class="sliderwrap">
                <label class="labeltext userselect">
                    <span class="label-text">Color and text</span>
                </label>
                @Html.EJS().Slider("out").Min(1373693400000).Max(1373736600000).Enabled(true).TooltipChange("tooltipChangeHandler").RenderingTicks("renderingTicksHandler").Tooltip(new SliderTooltipData { IsVisible = true, Placement = TooltipPlacement.Before, CssClass = "e-tooltip-cutomization" }).Ticks(new SliderTicksData { Placement = Placement.After, LargeStep = 3 * 3600000, SmallStep = 3600000, ShowSmallTicks = true }).Type(SliderType.MinRange).Value(1373715000000).Render()
            </div>
        </div>
    </div>



    <style>
        .sliderwrap .label-text {
        font-weight: 500;
    }

    .slider-content-wrapper.control-section .control-wrapper {
        width: 80%;
        margin: 0 auto;
        min-width: 185px;
    }

    .sliderwrap {
        margin-top: 40px;
    }

    #timeObj .e-material-handle,
    #out .e-material-handle,
    .bootstrap #out .e-handle,
    .bootstrap #timeObj .e-handle,
    .fabric #out .e-handle,
    .fabric #timeObj .e-handle,
    .highcontrast #out .e-handle,
    .highcontrast #timeObj .e-handle {
        background-color: #ffd939;
        border-color: #ffd939;
        z-index: 1;
    }

    .sliderwrap label {
        padding-bottom: 26px;
        font-size: 13px;
        font-weight: 500;
        margin-top: 15px;
    }

    .userselect {
        -webkit-user-select: none;
        /* Safari 3.1+ */
        -moz-user-select: none;
        /* Firefox 2+ */
        -ms-user-select: none;
        /* IE 10+ */
        user-select: none;
        /* Standard syntax */
    }



    .e-slider-tooltip.e-tooltip-wrap.e-popup.e-slider-tooltip .e-tip-content,
    .e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-range .e-tip-content.e-material-tooltip-show {
        color: #333;
    }

    .e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-range .e-arrow-tip-inner {
        color: #ffd939;
    }

    .e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-range.e-slider-horizontal-before .e-arrow-tip-outer {
        border-top-color: #ffd939;

    }

    .e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-range.e-slider-horizontal-after .e-arrow-tip-outer {
        border-bottom-color: #ffd939;
    }

    .e-slider-container .e-slider#timeObj .e-range,
    .e-slider-container .e-slider#out .e-range {
        background-color: #0375be;
        z-index: unset;
    }

    .e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-range,
    .e-slider-tooltip.e-tooltip-wrap.e-popup {
        background-color: #ffd939;
        border-color: #ffd939;
    }

    .bootstrap .e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer {
        border-top-color: #ffd939;
    }
 
    .bootstrap .e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-inner {
        color: #ffd939;
    }
    </style>
}

@section PreScripts {
    <script type="text/javascript">
        function tooltipChangeHandler(args) {
            /**
             * toLocaleTimeString is predefined javascript date function, which is used to
             * customize the date in different format
             */
            let custom = { hour: '2-digit', minute: '2-digit' };
            // Splitting the range values from the tooltip using space into an array.
            if (args.text.indexOf('-') !== -1) {
                let totalMiliSeconds = args.text.split(' ');
                // First part is the first handle value
                let firstPart = totalMiliSeconds[0];
                // Second part is the second handle value
                let secondPart = totalMiliSeconds[2];

                firstPart = new Date(Number(firstPart)).toLocaleTimeString('en-us', custom);
                secondPart = new Date(Number(secondPart)).toLocaleTimeString('en-us', custom);
                // Assigning our custom text to the tooltip value.
                args.text = firstPart + ' - ' + secondPart;
            } else {
                args.text = 'Until ' + new Date(Number(args.text)).toLocaleTimeString('en-us', custom);
            }
        }

        function renderingTicksHandler(args) {
            let totalMiliSeconds = Number(args.value);
            /**
             * toLocaleTimeString is predefined javascript date function, which is used to
             * customize the date in different format
             */
            let custom = { hour: '2-digit', minute: '2-digit' };
            // Assigning our custom text to the tick value.
            args.text = new Date(totalMiliSeconds).toLocaleTimeString('en-us', custom);
        }

        function createdTimeHandler() {
            let timeObj = document.getElementById('timeObj').ej2_instances[0];
            timeObj.keyUp({ keyCode: 9, target: timeObj.secondHandle });
            timeObj.secondHandle.focus();
            if(document.getElementById('right-pane')) {
            document.getElementById('right-pane').addEventListener('scroll', onScroll);
            }
        }

        // Handler used to reposition the tooltip on page scroll
        function onScroll() {
            let timeObj = document.getElementById('timeObj');
            let outObj = document.getElementById('out');
            timeObj.ej2_instances[0].refreshTooltip();
            outObj.ej2_instances[0].refreshTooltip();
        }

    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the customization of Slider's Tooltip. Drag the thumb over the bar for selecting the values
            between min and max.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>In this demo, we have demonstrated the following customization of Tooltip using CSS.</p>
        <ul>
            <li>Background color - In this sample, Tooltip has been customized to custom color.</li>
            <li>Color and text - In this sample, Tooltip and its content has been customized to custom color.</li>
        </ul>
    </div>
}

