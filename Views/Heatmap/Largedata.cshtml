@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section">
        <div id="container" align="center">
            @Html.EJS().HeatMap("container").TitleSettings(ts => ts.Text("Annual Flight Traffic Report").TextStyle(ViewBag.textStyle)).XAxis(xAxis=>
            xAxis.Minimum(new System.DateTime(2017,1,1)).Maximum(new System.DateTime(2017, 12, 31)).Interval(32).LabelFormat("MMM").ValueType(Syncfusion.EJ2.HeatMap.ValueType.DateTime).IntervalType(Syncfusion.EJ2.HeatMap.IntervalType.Days)).YAxis(yaxis =>
            yaxis.Labels(ViewBag.yLabels)).PaletteSettings(ps => ps.Palette(palette =>
            {
                palette.Value(150).Color("#A6DC7E").Add();
                palette.Value(200).Color("#DCD57E").Add();
                palette.Value(300).Color("#DC8D7E").Add();

            })).RenderingMode(Syncfusion.EJ2.HeatMap.DrawType.Canvas).LegendSettings(ls =>
            ls.Visible(false)).TooltipRender("tooltipRender").Load("load").CellSettings(cs=>cs.Border(ViewBag.border)).DataSource(ViewBag.dataSource).Render()
        </div>
    </div>
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    <script>
        var tooltipRender = function (args) {
            var intl = new ej.base.Internationalization();
            var labelFormat = 'MMM';
            var format = intl.getDateFormat({ format: "MMM dd, yyyy" });
            var value = format(args.xValue);
            args.content = [value + " " + args.yLabel + " : " + args.value + " flight arrivals"];
        };
        var load = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.heatmap.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
        };
        var dataSource = window.largeData;
        var xaxis = {
            minimum: new Date(2017, 0, 1),
            maximum: new Date(2017, 11, 31),
            interval: 32,
            intervalType: 'Days',
            valueType: 'DateTime',
            labelFormat: 'MMM'
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the annual traffic report of an airport with the number of flight arrivals in a year.The data label is disabled in this sample, the tooltip displays the data point values.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to switch the Heatmap to canvas rendering mode.The rendering performance will be better in <code>Canvas</code> rendering mode, while loading large datasets. You can switch the rendering mode for Heatmap between <code>SVG</code> and <code>Canvas</code> using the <code>renderingMode </code> property. When the <code>renderingMode</code> property is set to <code>Auto</code> the rendering mode will be switched automatically based of the size of data source to improve the rendering performance.
    </p>
    <p>
        Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <br>
    <p style="font-weight: 500">Injecting Module</p>
    <p>
        Heatmap component features are segregated into individual feature-wise modules. To use a tooltip, inject the <code>Tooltip </code>  module using the <code>Heatmap.Inject(Tooltip) </code> method, and use a legend by injecting the <code>Legend </code>  module using the <code>Heatmap.Inject(Legend) </code>  method.
    </p>
}
