@using Syncfusion.EJ2
@section ControlsSection{
    <div class="control-section">
        <div class="control-wrapper">
            <div class="control-section">
                @Html.EJS().RichTextEditor("customformat").Value((string)ViewBag.value).Created("created").Height("150px").EditorMode(Syncfusion.EJ2.RichTextEditor.EditorMode.Markdown).ToolbarSettings(e => e.Items((object)ViewBag.items)).Render()
            </div>
        </div>
    </div>
<style>
    .e-richtexteditor textarea.e-content {
        float: left;
    }

    .e-richtexteditor .e-rte-content {
        overflow: hidden;
    }

    .e-md-preview::before {
        content: '\e406';
    }

    .e-rte-content .e-content {
        float: right;
        width: 50%;
        overflow: auto;
        height: inherit;
        padding: 8px;
    }

        .e-rte-content .e-content.e-pre-source {
            width: 100%;
        }
</style>
}


@section ActionDescription{
    <div id="action-description">
        <p>
        This sample demonstrates how to customize tags of markdown formatting. Type or edit the text and apply the format to
        view customized markdown syntax. For example, apply “+” to Unordered list.
        </p>
    </div>
}
@section Description{
    <div id="description">
        The rich text editor allows you to customize the markdown syntax by overriding its default syntax. Configure the customized
        markdown syntax using the <code>formatter</code>property

        <p>The third-party library <code>Marked</code> is used in this sample to convert markdown into HTML content.</p>
    </div>
}
<script>
    var defaultRTE;
    var textArea;
    var mdPreview;
    var mdsource;
    function created() {
        defaultRTE = this;
            mdPreview = document.getElementById('MD_Preview');
            textArea = defaultRTE.contentModule.getEditPanel();
            textArea.addEventListener('keyup', function (e) {
                markDownConversion();
            });
            mdsource = document.getElementById('preview-code');
            mdsource.addEventListener('click', function (e) {
                fullPreview();
            });
    }
    loadExternalFile();
    // Dynamically load the marked.js file
    function loadExternalFile() {
        var script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.19/marked.js';
        document.getElementsByTagName('head')[0].appendChild(script);
    }
    function markDownConversion() {
        if (mdPreview.classList.contains('e-active')) {
            var id = defaultRTE.getID() + 'html-view';
            var htmlPreview = defaultRTE.element.querySelector('#' + id);
            htmlPreview.innerHTML = marked(defaultRTE.contentModule.getEditPanel().value);
        }
    }
    function fullPreview() {
        var id = defaultRTE.getID() + 'html-preview';
        var htmlPreview = defaultRTE.element.querySelector('#' + id);
        if (mdsource.classList.contains('e-active')) {
            mdsource.classList.remove('e-active');
            mdsource.parentElement.title = 'Preview';
            defaultRTE.enableToolbarItem(defaultRTE.toolbarSettings.items);
            textArea.style.display = 'block';
            htmlPreview.style.display = 'none';
        }
        else {
            mdsource.classList.add('e-active');
            defaultRTE.disableToolbarItem(defaultRTE.toolbarSettings.items);
            if (!htmlPreview) {
                htmlPreview = ej.base.createElement('div', { className: 'e-content e-pre-source' });
                htmlPreview.id = id;
                textArea.parentNode.appendChild(htmlPreview);
            }
            textArea.style.display = 'none';
            htmlPreview.style.display = 'block';
            htmlPreview.innerHTML = marked(defaultRTE.contentModule.getEditPanel().value);
            mdsource.parentElement.title = 'Code View';
        }
    }
</script>
