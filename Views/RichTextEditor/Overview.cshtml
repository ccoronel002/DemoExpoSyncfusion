@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@section ControlsSection{
    <div class="control-section">
        <div class="control-wrapper">
            <div class="control-section">
                @Html.EJS().RichTextEditor("default").ToolbarSettings(e=>e.Items((object)ViewBag.tools)).Value((string)ViewBag.value).ShowCharCount(true).MaxLength(2000).Created("created").ActionBegin("handleFullScreen").ActionComplete("actionCompleteHandler").Render()
            </div>
        </div>
    </div>
<link href="~/Content/RichTextEditor/codemirror.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>

    <style>
        .e-code-mirror::before {
            content: '\e345';
        }

        .e-html-preview::before {
            content: '\e350';
        }

        .CodeMirror-linenumber,
        .CodeMirror-gutters {
            display: none;
        }

        .sb-header {
            z-index: 100;
        }
    </style>
    <script type="text/javascript">
        var defaultRTE;
        var divPreview;
        var myCodeMirror;
        var textArea
        divPreview = document.getElementById('DIV_Preview');
        function created() {
            defaultRTE = this;
            textArea = defaultRTE.contentModule.getEditPanel();

        }
        function mirrorConversion(e) {
            var id = defaultRTE.getID() + 'mirror-view';
            var mirrorView = defaultRTE.element.querySelector('#' + id);
            var charCount = defaultRTE.element.querySelector('.e-rte-character-count');
            if (e.targetItem === 'Preview') {
                textArea.style.display = 'block';
                mirrorView.style.display = 'none';
                textArea.innerHTML = myCodeMirror.getValue();
                charCount.style.display = 'block';
            }
            else {
                if (!mirrorView) {
                    mirrorView = ej.base.createElement('div', { className: 'e-content' });
                    mirrorView.id = id;
                    textArea.parentNode.appendChild(mirrorView);
                }
                else {
                    mirrorView.innerHTML = '';
                }
                textArea.style.display = 'none';
                mirrorView.style.display = 'block';
                renderCodeMirror(mirrorView, defaultRTE.value);
                charCount.style.display = 'none';
            }
        }
        function renderCodeMirror(mirrorView, content) {
            myCodeMirror = CodeMirror(mirrorView, {
                value: content,
                lineNumbers: true,
                mode: 'text/html',
                lineWrapping: true,
            });
        }
        function handleFullScreen(e) {
            var leftBar;
            var transformElement;
            if (ej.base.Browser.isDevice) {
                leftBar = document.querySelector('#right-sidebar');
                transformElement = document.querySelector('.sample-browser.e-view.e-content-animation');
            }
            else {
                leftBar = document.querySelector('.sb-left-pane');
                transformElement = document.querySelector('#right-pane');
            }
            if (e.targetItem === 'Maximize') {
                ej.base.addClass([leftBar], ['e-close']);
                ej.base.removeClass([leftBar], ['e-open']);
                if (!ej.base.Browser.isDevice) {
                    transformElement.style.marginLeft = '0px';
                }

                transformElement.style.transform = 'inherit';
                transformElement.style.zIndex = 1001;
            }
            else if (e.targetItem === 'Minimize') {
                ej.base.removeClass([leftBar], ['e-close']);
                if (!ej.base.Browser.isDevice) {
                    ej.base.addClass([leftBar], ['e-open']);
                    transformElement.style.marginLeft = leftBar.offsetWidth + 'px';
                }
                transformElement.style.transform = 'translateX(0px)';
                transformElement.style.zIndex = "";
            }
        }
        function actionCompleteHandler(e) {
            if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
                this.sourceCodeModule.getPanel().style.display = 'none';
                mirrorConversion(e);
            }
            else {
                setTimeout(function () { defaultRTE.toolbarModule.refreshToolbarOverflow(); }, 400);
            }
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the full features of rich text editor that includes all the tools and functionalities.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>This sample used <code>Code mirror</code> plugins helps to highlight the HTML content and when changes happens in code view, the same has been reflected in preview mode. </p>
        <p>The editor’s toolbar contains commands to format the content. The toolbar consists of:</p>
        <ul>
            <li><code>Lists</code> - Ordered and unordered list types.</li>
            <li><code>Links</code> - A hyperlink can be inserted into the editor for quick access to related information.</li>
            <li><code>Image</code> - Inserts and manages images.</li>
            <li><code>Alignment</code> - Aligns the content with left, center, and right margins.</li>
            <li><code>Undo/Redo</code> - Allows undo/redo operations.</li>
            <li><code>Indent/ Outdent</code> - Increases/decreases the indent level of the content.</li>
            <li><code>Font</code> - Able to do styling on text like font family, size, fore color and background color.</li>
            <li><code>Lower / Upper case</code> – Changes the casing of the selected text.</li>
            <li><code>SubScript / SuperScript</code> - Makes the selected text as subscript (lower)/superscript(upper).</li>
            <li><code>FullScreen</code> - Stretches the editor to the maximum width and height of the browser window.</li>
            <li><code>Format</code> – Formats the sentence in different ways such as heading level, quotation, and code snippet</li>
            <li><code>Styles</code> – Allows you to apply inline styles to the selected content like bold, italic, and more.</li>
        </ul>
    </div>
}

