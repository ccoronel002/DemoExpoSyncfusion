@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section" style="width:70%;height:100%;float:left;">
        @Html.EJS().Diagram("diagram").Mode(Syncfusion.EJ2.Diagrams.RenderingMode.SVG).Created("diagramCreated").Width("100%").Height("540px").SnapSettings(s => s.HorizontalGridlines(ViewBag.gridLines).VerticalGridlines(ViewBag.gridLines)).RulerSettings(r => r.ShowRulers(true).DynamicGrid(true)).Render()
    </div>
    <div class="col-lg-4 property-section" style="width:30%;height:100%;float:left;">
        <div class="property-panel-header">
            Properties
        </div>
        <div class="row" id="appearance">
            <div class="row row-header" style="padding-top: 10px">
                Shapes
            </div>
            <div class="row" style="padding-top: 8px">
                <div title="Retangle" class="image-pattern-style e-selected-style" id="shape1" style="background-image: url('Content/images/diagram/Images/drawingTool/basicshape/DrawingTool_1.png'); margin-right: 3px">
                </div>
                <div title="Ellipse" class="image-pattern-style" id="shape2" style="background-image: url('Content/images/diagram/Images/drawingTool/basicshape/DrawingTool_2.png'); margin: 0px 3px">
                </div>
                <div title="Hexagon" class="image-pattern-style" id="shape3" style="background-image: url('Content/images/diagram/Images/drawingTool/basicshape/DrawingTool_3.png');">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div title="Pentagon" class="image-pattern-style" id="shape4" style="background-image: url('Content/images/diagram/Images/drawingTool/basicshape/DrawingTool_4.png'); margin-right: 3px">
                </div>
                <div title="Polygon" class="image-pattern-style" id="shape5" style="background-image: url('Content/images/diagram/Images/drawingTool/basicshape/DrawingTool_5.png'); margin: 0px 3px">
                </div>
                <div title="Path" class="image-pattern-style" id="path" style="background-image: url('Content/images/diagram/Images/drawingTool/DrawingTool_6.png');">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div title="Image" class="image-pattern-style" id="image" style="background-image: url('Content/images/diagram/Images/drawingTool/DrawingTool_7.png'); margin-right: 3px">
                </div>
                <div title="SVG" class="image-pattern-style" id="svg" style="background-image: url('Content/images/diagram/Images/drawingTool/DrawingTool_8.png'); margin: 0px 3px">
                </div>
                <div title="Text" class="image-pattern-style" id="text" style="background-image: url('Content/images/diagram/Images/drawingTool/DrawingTool_9.png');">
                </div>
            </div>
            <div class="row row-header" style="padding-top: 10px">
                Connector
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="straight" style="background-image: url('Content/images/diagram/Images/drawingTool/connector/Connectors_1.png'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="ortho" style="background-image: url('Content/images/diagram/Images/drawingTool/connector/Connectors_2.png'); margin: 0px 3px">
                </div>
                <div class="image-pattern-style" id="cubic" style="background-image: url('Content/images/diagram/Images/drawingTool/connector/Connectors_3.png'); ">
                </div>
            </div>
            <div class="row" style="padding-top: 10px">
                @Html.EJS().CheckBox("checked").Checked(true).Label("Continuous Draw").Change("onChangeData").Render()
            </div>
        </div>
    </div>
    <style>
        #diagram {
            display: block;
        }

        .row {
            display: block;
        }

        .image-pattern-style {
            background-color: white;
            background-size: 75%;
            background-repeat: no-repeat;
            height: 45px;
            width: calc((100% - 12px) / 3);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .row-header {
            font-size: 12px;
            font-weight: 500;
        }

        .e-checkbox-wrapper .e-label {
            font-size: 12px;
        }

        .property-panel-header {
            padding-top: 15px;
            padding-bottom: 5px;
        }

        .e-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        .control-section {
            padding-top: 0px;
            padding-bottom: 0px;
            padding-right: 0px;
        }

        .container-fluid {
            padding-left: 0px;
        }

        .col-xs-6 {
            padding-left: 0px;
            padding-right: 0px;
        }
    </style>

    <script type="text/javascript">
        var shape = [
            { shapeName: 'BasicShape', shapeId: 'Basic' },
            { shapeName: 'FlowShape', shapeId: 'Flow' },
            { shapeName: 'Connector', shapeId: 'Segment' },
            { shapeName: 'Path', shapeId: 'Path' },
            { shapeName: 'Image', shapeId: 'Image' },
            { shapeName: 'SVG', shapeId: 'SVG' },
            { shapeName: 'Text', shapeId: 'Text' },
        ];

        var basic = ['Rectangle', 'Ellipse', 'Hexagon', 'Parallelogram', 'Triangle', 'Plus', 'Star',
        'Pentagon', 'Heptagon', 'Octagon', 'Trapezoid', 'Decagon', 'RightTriangle', 'Cylinder', 'Diamond'];
        var flow = ['Process', 'Decision', 'Document', 'PreDefinedProcess', 'Terminator', 'PaperTap', 'DirectData', 'SequentialData'];
        var connector = ['Straight', 'Orthogonal'];
        var node;
        var diagram;

        function diagramCreated() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            SetShape("Rectangle");
            diagram.tool = ej.diagrams.DiagramTools.ContinuousDraw;
            diagram.dataBind();
        }


        function onChangeData(args) {
            diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tool = args.checked ? ej.diagrams.DiagramTools.ContinuousDraw : ej.diagrams.DiagramTools.DrawOnce;
        }

        var obj = [];
        document.getElementById('appearance').onclick = function (args) {
            diagram = document.getElementById("diagram").ej2_instances[0];
            var target = args.target;
            var selectedElement = document.getElementsByClassName('e-selected-style');
            if (selectedElement.length && target.id !== '' && target.id !== 'checked') {
                selectedElement[0].classList.remove('e-selected-style');
            }
            if (target.className === 'image-pattern-style') {
                switch (target.id) {
                    case 'shape1':
                        getRectangleShape();
                        target.classList.add('e-selected-style');
                        break;
                    case 'shape2':
                        getEllipseShape();
                        target.classList.add('e-selected-style');
                        break;
                    case 'shape3':
                        getHexagonShape();
                        target.classList.add('e-selected-style');
                        break;
                    case 'shape4':
                        getPentagonShape();
                        target.classList.add('e-selected-style');
                        break;
                    case 'shape5':
                        getPolygonShape();
                        target.classList.add('e-selected-style');
                        break;
                    case 'straight':
                        var draw = document.getElementById('checked');
                        if (!draw.checked) {
                            diagram.tool = ej.diagrams.DiagramTools.DrawOnce;
                        }
                        diagram.drawingObject = { type: 'Straight' };
                        diagram.dataBind();
                        target.classList.add('e-selected-style');
                        break;
                    case 'ortho':
                        var continuousDraw = document.getElementById('checked');
                        if (!continuousDraw.checked) {
                            diagram.tool = ej.diagrams.DiagramTools.DrawOnce;
                        }
                        diagram.drawingObject = { type: 'Orthogonal' };
                        diagram.dataBind();
                        target.classList.add('e-selected-style');
                        break;
                    case 'cubic':
                        var draw1 = document.getElementById('checked');
                        if (!draw1.checked) {
                            diagram.tool = ej.diagrams.DiagramTools.DrawOnce;
                        }
                        diagram.drawingObject = { type: 'Bezier' };
                        diagram.dataBind();
                        target.classList.add('e-selected-style');
                        break;
                    case 'path':
                        getPathShape();
                        target.classList.add('e-selected-style');
                        break;
                    case 'image':
                        getImageNode();
                        target.classList.add('e-selected-style');
                        break;
                    case 'svg':
                        getSVGNode();
                        target.classList.add('e-selected-style');
                        break;
                    case 'text':
                        getTextNode();
                        target.classList.add('e-selected-style');
                        break;
                }
            }
        };
        function setdrawnode(node) {
            diagram = document.getElementById("diagram").ej2_instances[0];
            var continuousDraw = document.getElementById('checked');
            if (!continuousDraw.checked) {
                diagram.tool = ej.diagrams.DiagramTools.DrawOnce;
            }
            diagram.drawingObject = node;
            diagram.dataBind();
        }
        function enableTool() {
            diagram = document.getElementById("diagram").ej2_instances[0];
            var continuousDraw = document.getElementById('checked');
            if (!continuousDraw.checked) {
                diagram.tool = ej.diagrams.DiagramTools.DrawOnce;
            }
            diagram.dataBind();
        }
        function getPolygonShape() {
            SetShape('Polygon');
            enableTool();
        }
        function SetShape(obj) {
            diagram = document.getElementById("diagram").ej2_instances[0];
            var drawingshape;
            drawingshape = { type: 'Basic', shape: obj };
            node = {
                shape: drawingshape
            };
            diagram.drawingObject = node;
        }
        function getPentagonShape() {
            SetShape('Pentagon');
            enableTool();
        }
        function getHexagonShape() {
            SetShape('Hexagon');
            enableTool();
        }
        function getEllipseShape() {
            SetShape('Ellipse');
            enableTool();
        }
        function getRectangleShape() {
            SetShape('Rectangle');

            enableTool();
        }
        function getTextNode() {
            var drawingshape;
            drawingshape = { type: 'Text' };
            node = {
                shape: drawingshape
            };
            setdrawnode(node);
        }
        function getSVGNode() {
            var drawingshape;
            drawingshape = {
                type: 'Native', content: getpath(),
            };
            node = {
                shape: drawingshape
            };
            setdrawnode(node);
        }

        function getpath() {
            var str = '<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="350.000000pt" ' +
                'height="229.000000pt" viewBox="0 0 350.000000 229.000000" ' +
                'preserveAspectRatio="xMidYMid meet"> <metadata>' +
                ' Created by potrace 1.11, written by Peter Selinger 2001-2013' +
                ' </metadata> <g transform="translate(0.000000,229.000000) scale(0.100000,-0.100000)"' +
                ' fill="#de6ca9" stroke="none"><path d="M0 1145 l0 -1145 1750 0 1750 0 0 1145 0 1145' +
                ' -1750 0 -1750 0 0 -1145z m1434 186 c19 -8 26 -18 26 -37 0 -24 -3 -26' +
                ' -27 -19 -16 3 -58 9 -94 12 -63 5 -67 4 -88 -23 -23 -29 -21 -60 6 -81 8' +
                ' -6 47 -19 86 -29 55 -13 80 -25 106 -51 31 -31 33 -37 29 -88 -8 -94 -69' +
                ' -133 -193 -122 -90 7 -115 20 -115 58 0 26 3 30 18 24 91 -38 168 -41 204' +
                ' -8 23 21 23 75 1 96 -10 8 -49 23 -88 33 -88 22 -135 63 -135 118 0 92 67 140' +
                ' 181 131 31 -2 68 -9 83 -14z m854 -6 c38 -15 42 -21 42 -51 l0 -33 -47 25' +
                ' c-41 22 -58 25 -115 22 -58 -3 -72 -8 -97 -32 -79 -75 -59 -259 32 -297 35' +
                ' -15 106 -18 150 -6 26 7 27 10 27 67 l0 60 -50 0 c-47 0 -50 2 -50 25 0 25' +
                ' 1 25 80 25 l81 0 -3 -97 -3 -98 -40 -20 c-22 -10 -65 -21 -95 -23 -153 -11' +
                ' -242 74 -243 230 0 145 93 235 233 224 30 -2 74 -12 98 -21z m-638 -169 l67' +
                ' -178 40 103 c22 57 53 139 69 182 28 75 29 77 62 77 19 0 32 -4 30 -9 -1 -5' +
                ' -39 -104 -83 -220 l-80 -211 -37 0 c-35 0 -37 2 -56 53 -11 28 -48 124 -81 ' +
                '211 -34 87 -61 163 -61 168 0 5 14 8 32 6 31 -3 32 -5 98 -182z" />' +
                '</g> </svg>';
            return str;
        }
        function getImageNode() {
            var drawingshape;
            drawingshape = { type: 'Image', source: '../Content/images/diagram/Images/drawingTool/DrawingTool_7.png' };
            node = {
                shape: drawingshape
            };
            setdrawnode(node);
        }
        function getPathShape() {
            var drawingshape;
            drawingshape = { type: 'Path', data: 'M540.3643,137.9336L546.7973,159.7016L570.3633,159.7296L550.7723,171.9366L558.9053,194.9966L540.3643,179.4996L521.8223,194.9966L529.9553,171.9366L510.3633,159.7296L533.9313,159.7016L540.3643,137.9336z' };
            node = {
                shape: drawingshape
            };
            setdrawnode(node);
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes how to build a diagram interactively using drawing tools. Continuous draw option, snapping, and undo/redo support are enabled to easily draw diagrams.
        Rulers, gridlines, and snapping options are enabled to easily align objects.
    </p>
}
@section Description{
    <p>
        This example shows how to draw shapes and connections interactively. In addition to that, rulers, gridlines, and snapping options are enabled to assist drawing.

        The <code>tool</code> property can be used to enable drawing. Add <code>DrawOnce</code> or <code>ContinousDraw</code> option to the
        <code>tool</code> property of the diagram. The <code>drawingObject</code> property can be used to define a shape/connector to be drawn.
    </p>

    <p>
        Few shape and connector templates are added in the palette. To draw basic shapes and connectors, click the templates in the palette.
        For polygon shapes, a corner/point will be added to the polygon for each mouse left button click. Drawing will be completed either on mouse right button click or double click.
    </p>
}

