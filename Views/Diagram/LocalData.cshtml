@using Syncfusion.EJ2;
@using EJ2MVCSampleBrowser.Models;

@section ControlsSection {
    <div class="control-section" style="width:100%;height:100%;float:left; padding: 0px">
        @Html.EJS().Diagram("diagram").Width("100%").Height("490px").Created("create").GetNodeDefaults("nodeDefaults").GetConnectorDefaults("connectorDefaults").DataSourceSettings(ss => ss.Id("Name").ParentId("Category")
        .DataManager(new DataManager() { Data = (List<EJ2MVCSampleBrowser.Controllers.Diagram.LocalDataDetails>)ViewBag.Nodes })).Layout(l => l.Type(Syncfusion.EJ2.Diagrams.LayoutType.HierarchicalTree).HorizontalSpacing(15).VerticalSpacing(50)).SnapSettings(s => s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None)).Render()
    </div>

    <style>
        #diagram {
            display: block;
        }

        .row {
            display: block;
        }
    </style>

    <script>
        function create() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
            diagram.dataBind();
        }
        function nodeDefaults(obj, diagram) {
            //Initialize shape
            obj.annotations = [{
                /* tslint:disable:no-string-literal */
                content: obj.data.Name, margin: { top: 10, left: 10, right: 10, bottom: 0 },
                style: { color: 'black' }
            }];
            obj.style = { fill: '#ffeec7', strokeColor: '#f5d897', strokeWidth: 1 };
            obj.shape = { type: 'Basic', shape: 'Rectangle' };
            obj.width = 95;
            obj.height = 30;
            return obj;
        }

        function connectorDefaults(connector, diagram) {
            connector.type = 'Orthogonal';
            connector.style.strokeColor = '#4d4d4d';
            connector.targetDecorator.shape = 'None';
            return connector;
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the classifications of species using hierarchical tree layout algorithm. Data Manager support is used to bind data with the diagram.
    </p>
}

@section Description{
    <p>
        This example shows how to generate a diagram from the saved data. The <code>dataSourceSettings</code> property can be used to map an external data source with the diagram control. The
        <code>id</code> property of <code>dataSourceSettings</code> can be used to define a unique field of an external data. The
        <code>parentId</code> property can be used to define the relationship between the objects.
    </p>
    <br>
}


