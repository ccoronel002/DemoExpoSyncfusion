@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Diagrams;
@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="content-wrapper" style="background: white">
            @(Html.EJS().Diagram("container")
    .Width("100%")
    .Height("580px")
    .Mode(Syncfusion.EJ2.Diagrams.RenderingMode.SVG)
    .GetNodeDefaults("getNodeDefaults")
    .GetConnectorDefaults("getConnectorDefaults")
    .SetNodeTemplate("setNodeTemplate")
    .SnapSettings(s => s.Constraints(SnapConstraints.None))
    .Layout(l => l.Type(Syncfusion.EJ2.Diagrams.LayoutType.HierarchicalTree).Orientation(Syncfusion.EJ2.Diagrams.LayoutOrientation.LeftToRight).VerticalSpacing(75).Margin(new Syncfusion.EJ2.Diagrams.DiagramMargin() { Left = 40, Right = 0, Bottom = 0, Top = 0 }))
    .Nodes(ViewBag.nodes)
    .Connectors(ViewBag.connectors).Render()

            )
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <div class="property-panel-header">
            Properties
        </div>
        <div class="row" id="appearance">
            <div class="row row-header">
                Appearance
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="normalconnector1" style="background-image: url('Content/images/diagram/connector/Connectors_1.png'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="normalconnector2" style="background-image: url('Content/images/diagram/connector/Connectors_2.png'); margin: 0px 3px">
                </div>
                <div class="image-pattern-style" id="normalconnector3" style="background-image: url('Content/images/diagram/connector/Connectors_3.png'); margin-left: 3px">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="connector1withstroke" style="background-image: url('Content/images/diagram/connector/Connectors_4.png'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="connector2withstroke" style="background-image: url('Content/images/diagram/connector/Connectors_5.png'); margin: 0px 3px">
                </div>
                <div class="image-pattern-style" id="connector3withstroke" style="background-image: url('Content/images/diagram/connector/Connectors_6.png'); margin-left: 3px">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="connector1withdasharray" style="background-image: url('Content/images/diagram/connector/Connectors_7.png'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="connector2withdasharray" style="background-image: url('Content/images/diagram/connector/Connectors_8.png'); margin: 0px 3px">
                </div>
                <div class="image-pattern-style" id="connector3withdasharray" style="background-image: url('Content/images/diagram/connector/Connectors_9.png'); margin-left: 3px">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="cornerradious" style="background-image: url('Content/images/diagram/connector/Connectors_10.png'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="sourcedecorator" style="background-image: url('Content/images/diagram/connector/Connectors_11.png'); margin: 0px 3px">
                </div>
                <div class="image-pattern-style" id="sourcedecoratorwithdasharray" style="background-image: url('Content/images/diagram/connector/Connectors_12.png'); margin-left: 3px">
                </div>
            </div>
        </div>
        <div class="row" style="padding-top: 10px">
            <div class="row" style="padding-top: 10px">
                @Html.EJS().CheckBox("checked").Checked(false).Label("Lock").Change("checkBoxChanged").Render()
            </div>
        </div>
    </div>
    <style>
        .image-pattern-style {
            background-color: white;
            background-size: contain;
            background-repeat: no-repeat;
            height: 45px;
            width: calc((100% - 13px) / 3);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .row-header {
            font-size: 12px;
            font-weight: 500;
        }

        .e-checkbox-wrapper .e-label {
            font-size: 12px;
        }

        .col-xs-6 {
            padding-left: 0px;
            padding-right: 0px;
        }

        .e-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        .row {
            display: block;
        }

        #container {
            display: block;
        }
    </style>
    <script>


        function getNodeDefaults(obj, diagram) {
            if (obj.id !== 'node1') {
                //Set ports
                obj.ports = getPorts(obj);
            }
            if (obj.id !== 'node6' ) {
                obj.shape = { type: 'Basic', shape: 'Rectangle', cornerRadius: 10 };
                obj.width = 80;
                obj.style.strokeWidth = 2;
                obj.style.strokeColor = '#6F409F';
                obj.height = 35;
            }
        }

        function getConnectorDefaults(obj, diagram) {
            obj.type = 'Bezier';
            obj.style.strokeColor = '#6f409f';
            obj.style.strokeWidth = 2;
            obj.targetDecorator = {
                style: {
                    strokeColor: '#6f409f',
                    fill: '#6f409f',
                }
            }
        }


        function setNodeTemplate(obj, diagram) {
            if (obj.id === 'node6') {
                obj.offsetY = 290;
                obj.offsetX = 550;
                var canvas = new ej.diagrams.StackPanel;
                canvas.children = [];
                canvas.style.strokeWidth = 0;
                canvas.style.fill = '#e6e0eb';
                canvas.children.push(getTextElement('Events', '#a6a1e0'));
                canvas.children.push(getTextElement('Emails', '#db8ec9'));
                canvas.children.push(getTextElement('Calls', '#db8ec9'));
                canvas.children.push(getTextElement('Smart Contents', '#db8ec9'));
                return canvas;
            }
            return null;
        }

        function getTextElement(text, color) {
            let textElement = new ej.diagrams.TextElement();
            textElement.width = 80;
            textElement.height = 35;
            textElement.content = text;
            textElement.style.fill = '#6f409f';
            textElement.style.color = 'white';
            textElement.style.strokeColor = '#6f409f';
            textElement.cornerRadius = 5;
            textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };
            textElement.relativeMode = 'Object';
            return textElement;
        }

        function getPorts(obj) {
            if (obj.id === 'node2') {
                var node2Ports = [
                    { id: 'port1', offset: { x: 1, y: 0.25 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port2', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port3', offset: { x: 1, y: 0.75 }, visibility: ej.diagrams.PortVisibility.Hidden }
                ];
                return node2Ports;
            } else if (obj.id === 'node6') {
                let node6Ports = [
                    { id: 'port4', offset: { x: 0, y: 0.46 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port5', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port6', offset: { x: 0, y: 0.54 }, visibility: ej.diagrams.PortVisibility.Hidden }
                ];
                return node6Ports;
            } else {
                let ports = [
                    { id: 'portin', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'portOut', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                ];
                return ports;
            }
        }

        function checkBoxChanged(args) {
            var label = "Aspect Ratio";
            var diagram = document.getElementById("container").ej2_instances[0];
            for (var i = 0; i < diagram.nodes.length; i++) {
                node = diagram.nodes[i];
                if (args.checked) {
                    node.constraints &= ~(ej.diagrams.NodeConstraints.Resize | ej.diagrams.NodeConstraints.Rotate | ej.diagrams.NodeConstraints.Drag);
                    node.constraints |= ej.diagrams.NodeConstraints.ReadOnly;
                }
                else {
                    node.constraints |= ej.diagrams.NodeConstraints.Default & ~(ej.diagrams.NodeConstraints.ReadOnly);
                }
                diagram.dataBind();
            }
            for (var i = 0; i < diagram.connectors.length; i++) {
                connector = diagram.connectors[i];
                if (args.checked) {
                    connector.constraints &= ~(ej.diagrams.ConnectorConstraints.DragSourceEnd
                        | ej.diagrams.ConnectorConstraints.DragTargetEnd | ej.diagrams.ConnectorConstraints.DragSegmentThumb);
                    connector.constraints |= ej.diagrams.ConnectorConstraints.ReadOnly;
                } else {
                    connector.constraints |= ej.diagrams.ConnectorConstraints.Default & ~(ej.diagrams.ConnectorConstraints.ReadOnly);
                }
                diagram.dataBind();
            }
        }

        document.getElementById('appearance').onclick = function (args) {
            let target = args.target;
            var diagram = document.getElementById("container").ej2_instances[0];
            let selectedElement = document.getElementsByClassName('e-selected-style');
            if (selectedElement.length) {
                selectedElement[0].classList.remove('e-selected-style');
            }
            if (target.className === 'image-pattern-style') {
                switch (target.id) {
                    case 'normalconnector1':
                        defaultConnector('Straight');
                        target.classList.add('e-selected-style');
                        break;
                    case 'normalconnector2':
                        defaultConnector('Orthogonal');
                        target.classList.add('e-selected-style');
                        break;
                    case 'normalconnector3':
                        defaultConnector('Bezier');
                        target.classList.add('e-selected-style');
                        break;
                    case 'connector1withstroke':
                        applyConnectorStyle(false, false, false, 'Straight');
                        target.classList.add('e-selected-style');
                        break;
                    case 'connector2withstroke':
                        applyConnectorStyle(false, false, false, 'Orthogonal');
                        target.classList.add('e-selected-style');
                        break;
                    case 'connector3withstroke':
                        applyConnectorStyle(false, false, false, 'Bezier');
                        target.classList.add('e-selected-style');
                        break;
                    case 'connector1withdasharray':
                        applyConnectorStyle(true, false, false, 'Straight');
                        target.classList.add('e-selected-style');
                        break;
                    case 'connector2withdasharray':
                        applyConnectorStyle(true, false, false, 'Orthogonal');
                        target.classList.add('e-selected-style');
                        break;
                    case 'connector3withdasharray':
                        applyConnectorStyle(true, false, false, 'Bezier');
                        target.classList.add('e-selected-style');
                        break;
                    case 'cornerradious':
                        applyConnectorStyle(false, false, true, 'Orthogonal');
                        target.classList.add('e-selected-style');
                        break;
                    case 'sourcedecorator':
                        applyConnectorStyle(false, true, false, 'Straight');
                        target.classList.add('e-selected-style');
                        break;
                    case 'sourcedecoratorwithdasharray':
                        applyConnectorStyle(true, true, false, 'Straight');
                        target.classList.add('e-selected-style');
                        break;
                }
            }
        };
        function applyConnectorStyle(dashedLine, sourceDec, isRounded, type) {
            var diagram = document.getElementById("container").ej2_instances[0];
            for (var i = 0; i < diagram.connectors.length; i++) {
                diagram.connectors[i].style.strokeWidth = 2;
                diagram.connectors[i].type = type;
                if (isRounded) {
                    diagram.connectors[i].cornerRadius = 5;
                }
                if (sourceDec) {
                    diagram.connectors[i].sourceDecorator = {
                        style: {
                            strokeColor: '#6f409f',
                            fill: '#6f409f', strokeWidth: 2
                        }, shape: 'Circle'
                    };
                } else {
                    diagram.connectors[i].sourceDecorator = { shape: 'None' };
                }
                if (dashedLine) {
                    diagram.connectors[i].style.strokeDashArray = '5,5';
                } else {
                    diagram.connectors[i].style.strokeDashArray = '0,0';
                }
                diagram.connectors[i].targetDecorator = {
                    style: {
                        strokeColor: '#6f409f',
                        fill: '#6f409f', strokeWidth: 2
                    }, shape: 'Arrow'
                };
                diagram.dataBind();
            }
        }
        function defaultConnector(type) {
            var diagram = document.getElementById("container").ej2_instances[0];
            for (var i = 0; i < diagram.connectors.length; i++) {
                diagram.connectors[i].style.strokeWidth = 1;
                diagram.connectors[i].type = type;
                diagram.connectors[i].sourceDecorator = { shape: 'None' };
                diagram.connectors[i].style.strokeDashArray = '0,0';
                diagram.connectors[i].targetDecorator = {
                    style: {
                        strokeColor: '#6f409f',
                        fill: '#6f409f', strokeWidth: 1
                    }, shape: 'Arrow'
                };
                diagram.dataBind();
            }
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the data flow in a marketing process using predefined shapes and connectors. Different types of connectors and decorators are used to customize the appearance, path, and direction of the data flow.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to add connectors to connect the shapes and how to customize the appearance of the connectors.
        You can use the <code>style</code> property of the connector to customize its stroke style. You can use the
        <code>cornerRadius</code> property to add connectors with rounded corners.
    </p>

    <p>
        To change the appearance, click different styles in the property panel.
    </p>

    <p>
        Additionally, you can see how to lock the connectors to disable editing. The
        <code>constraints</code> property of connector enables/disables editing.
        In this example, the shapes are automatically arranged using hierarchical tree layout.
    </p>
}


