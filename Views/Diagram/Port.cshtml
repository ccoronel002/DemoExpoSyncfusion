@using Syncfusion.EJ2;
@using Syncfusion.EJ2.DropDowns
@section ControlsSection{
    <div class="col-lg-8 control-section" style="float:left;">
        @(Html.EJS().Diagram("container")
.Width("100%")
.Height("580px")
.Mode(Syncfusion.EJ2.Diagrams.RenderingMode.SVG)
.GetNodeDefaults("getNodeDefaults")
.SnapSettings(s => s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None))
.GetConnectorDefaults("getConnectorDefaults")
.Nodes(ViewBag.nodes)
.SelectionChange("selectChange")
.Connectors(ViewBag.connectors).Render()
        )
    </div>
    <div class="col-lg-4 property-section" style="padding-bottom:10px;">
        <div class="property-panel-header">
            Properties
        </div>
        <div id="propertypanel" class="e-remove-selection">
            <div class="propertypanel-content">
                <div class="row row-header" style="font-size: 13px; ">
                    Port Customization
                </div>
                <div class="row sb-child-row">
                    <div class="col-lg-6">
                        <div style="padding-bottom: 8px">
                            Visibility
                        </div>
                        <div>
                            @Html.EJS().MultiSelect("portsVisiblity").Enabled(true).ShowDropDownIcon(true).Fields(new MultiSelectFieldSettings() { Text = "text", Value = "PortVisibility" }).DataSource(ViewBag.PortVisibility).ShowSelectAll(true).PopupHeight("250px").PopupWidth("130px").Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).Change("portVisibilityDropOnChange").Render()
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div style="padding-bottom: 8px">
                            Shape
                        </div>
                        <div>
                            @Html.EJS().DropDownList("shape").Enabled(true).Placeholder("Select a Shape").DataSource(ViewBag.shape).Fields(new DropDownListFieldSettings() { Value = "shape", Text = "text" }).Change("portShapeDropOnChange").Render()
                        </div>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div class="col-lg-6">
                        <div style="padding-bottom: 8px">
                            Fill Color
                        </div>
                        <div style="padding-bottom: 8px">
                            @Html.EJS().ColorPicker("fill").Value("#000").Disabled(false).Change("colorChange").Render()
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div style="padding-bottom: 8px">
                            Stroke Color
                        </div>
                        <div style="padding-bottom: 8px">
                            @Html.EJS().ColorPicker("border").Value("#000").Disabled(false).Change("borderChange").Render()
                        </div>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div class="col-lg-6">
                        <div style="padding-bottom: 8px">
                            Stroke Width
                        </div>
                        <div style="padding-bottom: 8px">
                            @Html.EJS().NumericTextBox("width").Enabled(true).Format("###.##").Change("widthChange").Value(1).Step(0.5).Render()
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div style="padding-bottom: 8px">
                            Size
                        </div>
                        <div style="padding-bottom: 8px">
                            @Html.EJS().NumericTextBox("size").Enabled(true).Format("###.##").Change("sizeChange").Created("diagramCreated").Value(6).Step(1).Render()
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        #container {
            display: block;
        }

        .sb-child-row {
            margin-top: 8px;
        }

        .property-panel-header {
            padding-top: 15px;
            padding-bottom: 15px;
        }

        .property-section .e-remove-selection {
            cursor: not-allowed;
        }

        .row-header {
            font-size: 13px;
            font-weight: 500;
            padding-left: 10px;
        }

        .e-remove-selection .propertypanel-content {
            pointer-events: none;
        }
    </style>
    <script>

        function diagramCreated() {
            var diagram = document.getElementById("container").ej2_instances[0];
            diagram.select([diagram.nodes[0]]);
            diagram.dataBind();
        }

        function getNodeDefaults(obj, diagram) {
            if (obj.id === 'node1' || obj.id === 'node2' || obj.id === 'node4' || obj.id === 'node6') {
                obj.shape = { type: 'Basic', shape: 'Rectangle' };
            } else if (obj.id === 'node3' || obj.id === 'node5' || obj.id === 'node7') {
                obj.shape = { type: 'Basic', shape: 'Diamond' };
            }
            //sets height and width for nodes
            obj.height = 65;
            obj.width = 100;
            obj.style = { fill: '#ebf8fb', strokeColor: '#baeaf5' };
            for (var i = 0; i < obj.ports.length; i++) {
                //sets styles for the ports
                obj.ports[i].style = {
                    fill: '#366f8c',
                    strokeColor: '#366f8c'
                };
                obj.ports[i].width = 6;
                obj.ports[i].height = 6;
                obj.ports[i].visibility = ej.diagrams.PortVisibility.Visible;
            }
        }
        function getConnectorDefaults(connector) {
            connector.type = 'Orthogonal';
            connector.style = { strokeColor: '#8cdcef', strokeWidth: 1 };
            connector.targetDecorator = { width: 5, height: 5, style: { fill: '#8cdcef', strokeColor: '#8cdcef' } };
        }



        var visibility = [
            { PortVisibility: ej.diagrams.PortVisibility.Visible, text: 'Visible' },
            { PortVisibility: ej.diagrams.PortVisibility.Hidden, text: 'Hidden' },
            { PortVisibility: ej.diagrams.PortVisibility.Hover, text: 'Hover' },
            { PortVisibility: ej.diagrams.PortVisibility.Connect, text: 'Connect' }
        ];




        function colorChange(args) {
            var portFillDrop = document.getElementById("fill").ej2_instances[0];
            var diagram = document.getElementById("container").ej2_instances[0];
            if (portFillDrop.value) {
                var port = getPort();
                for (var j = 0; j < port.length; j++) {
                    port[j].style.fill = args.currentValue.rgba;
                }
            }
            diagram.dataBind();
        }

        function borderChange(args) {
            var portBorderDrop = document.getElementById("border").ej2_instances[0];
            var diagram = document.getElementById("container").ej2_instances[0];
            if (portBorderDrop.value) {
                var port = getPort();
                for (var j = 0; j < port.length; j++) {
                    port[j].style.strokeColor = args.currentValue.rgba;
                }
            }
            diagram.dataBind();
        }

        var shape = [
            { shape: 'X', text: 'X' },
            { shape: 'Circle', text: 'Circle' },
            { shape: 'Square', text: 'Square' },
            { shape: 'Custom', text: 'Custom' }
        ];

        function sizeChange(args) {
            applyportstyle('size');
        }

        function widthChange(args) {
            applyportstyle('strokewidth');
        }

        function getPort() {
            var diagram = document.getElementById("container").ej2_instances[0];
            var node = diagram.selectedItems.nodes[0];
            return node.ports;
        }

        function selectChange(args) {
            var portVisibilityDrop = document.getElementById("portsVisiblity").ej2_instances[0];
            var portFillDrop = document.getElementById("fill").ej2_instances[0];
            var portBorderDrop = document.getElementById("border").ej2_instances[0];
            var portShapeDrop = document.getElementById("shape").ej2_instances[0];
            var portSizeNum = document.getElementById("size").ej2_instances[0];
            var portWidthNum = document.getElementById("width").ej2_instances[0];


            if (args.state === 'Changed') {
                var appearance = document.getElementById('propertypanel');
                var selectedElement = document.getElementsByClassName('e-remove-selection');
                if (args.newValue) {
                    if (!appearance.classList.contains('e-remove-selection')) {
                        appearance.classList.add('e-remove-selection');
                    }
                    if (args.newValue[0] instanceof ej.diagrams.Node && selectedElement.length) {
                        selectedElement[0].classList.remove('e-remove-selection');
                        var port = getPort();
                        var PortVisibility = ej.diagrams.PortVisibility;
                        portVisibilityDrop.value = [];
                        if (PortVisibility.Visible & port[0].visibility) {
                            portVisibilityDrop.value.push(PortVisibility.Visible);
                        }
                        if (PortVisibility.Hidden & port[0].visibility) {
                            portVisibilityDrop.value.push(PortVisibility.Hidden);
                        }
                        if (PortVisibility.Hover & port[0].visibility) {
                            portVisibilityDrop.value.push(PortVisibility.Hover);
                        }
                        if (PortVisibility.Connect & port[0].visibility) {
                            portVisibilityDrop.value.push(PortVisibility.Connect);
                        }
                        if (portVisibilityDrop.value.length === 0) {
                            portVisibilityDrop.placeholder = 'Select Visibility';
                        }

                        portVisibilityDrop.dataBind();
                        portFillDrop.value = port[0].style.fill;
                        portFillDrop.dataBind();
                        portBorderDrop.value = port[0].style.strokeColor;
                        portBorderDrop.dataBind();
                        portShapeDrop.value = port[0].shape;
                        portShapeDrop.dataBind();
                        portSizeNum.value = port[0].height;
                        portSizeNum.dataBind();
                        portWidthNum.value = port[0].style.strokeWidth;
                        portWidthNum.dataBind();
                    }
                }
            }
        }

        function applyportstyle(value) {
            var diagram = document.getElementById("container").ej2_instances[0];
            var portSizeNum = document.getElementById("size").ej2_instances[0];
            var portWidthNum = document.getElementById("width").ej2_instances[0];
            var port = getPort();
            for (var j = 0; j < port.length; j++) {
                if (value === 'size') {

                    port[j].height = portSizeNum.value;
                    port[j].width = portSizeNum.value;

                } else if (value === 'strokewidth') {
                    port[j].style.strokeWidth = portWidthNum.value;
                }
            }
            diagram.dataBind();
        }

        function portVisibilityDropOnChange(args) {
            var diagram = document.getElementById("container").ej2_instances[0];
            var port = getPort();
            if (port) {
                for (var j = 0; j < port.length; j++) {
                    port[j].visibility = 0;
                    for (var i = 0; i < args.value.length; i++) {
                        port[j].visibility += args.value[i];
                    }
                }
            }
            diagram.dataBind();
        }

        function portShapeDropOnChange(args) {
            var portShapeDrop = document.getElementById("shape").ej2_instances[0];
            var diagram = document.getElementById("container").ej2_instances[0];
            var port = getPort();
            for (var j = 0; j < port.length; j++) {
                switch (portShapeDrop.value) {
                    case 'X':
                        port[j].shape = 'X';
                        break;
                    case 'Circle':
                        port[j].shape = 'Circle';
                        break;
                    case 'Square':
                        port[j].shape = 'Square';
                        break;
                    case 'Custom':
                        port[j].shape = 'Custom';
                        port[j].pathData = 'M6.805,0L13.61L10.703L0,10.703z';
                        break;
                }
                diagram.dataBind();
            }
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the process flow of publishing a book using connection points. Connection points are static points
        over the shapes that allow creating connections to the shapes. Customizing the size and appearance of the connection points is illustrated in this example.
    </p>
}
@section Description{
    <p>
        This example shows how to add connection ports to shapes. The <code>ports</code> property of the node defines the static connection ports. The <code>offset</code>,
        <code>horizontalAlignment</code>, <code>verticalAlignment</code> and <code>margin</code> properties of the ports define its position.
    </p>
    <p>
        The <code>style</code> property of the port can be used to customize its appearance. The <code>visibility</code> property can also be used to define when the connection ports should be visible.
    </p>

    <p>
        In this example, the appearance and visibility of the ports can be customized using the options added to the property panel.
    </p>
}














