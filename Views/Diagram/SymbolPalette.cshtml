@using Syncfusion.EJ2.Diagrams;
@section ControlsSection{
    <div class="col-lg-8 control-section" id="palette-space" style="height:100%; float:left">
        @(Html.EJS().SymbolPalette("symbolpalette").EnableAnimation(true).GetNodeDefaults("getNodeDefaults").GetSymbolInfo("getSymbolInfo").SymbolHeight(80).SymbolWidth(80).Palettes(ViewBag.palettes).SymbolMargin(new SymbolPaletteMargin() { Left = 15, Right = 15, Top = 15, Bottom = 15 }).Render() )
    </div>
    <div class="col-lg-4 property-section" style="float: left; height: 80%">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td>
                        <div>Expandable: </div>
                    </td>
                    <td>
                        @Html.EJS().DropDownList("expand").Change("valueChanged").Value("Single").Width("110px").DataSource(ViewBag.expand).Render()
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Symbol Size: </div>
                    </td>
                    <td>
                        @Html.EJS().NumericTextBox("size").Format("###.##").Value(80).Max(100).Min(40).Step(5).Width("110px").Change("sizeChanged").Render()
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Animation: </div>
                    </td>
                    <td>
                        @Html.EJS().CheckBox("animation").Checked(true).Change("onAnimationChange").Render()
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Item Text: </div>
                    </td>
                    <td>
                        @Html.EJS().CheckBox("itemtext").Checked(false).Change("onItemTextChange").Render()
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <style>
        .row {
            display: block;
        }

        #symbolpalette {
            display: block;
        }

        .property-panel-table div {
            padding-left: 0px;
        }
    </style>

    <script>
        function getNodeDefaults(symbol) {
            if (symbol.id === 'Terminator' || symbol.id === 'Process') {
                symbol.width = 80;
                symbol.height = 40;
            } else if (symbol.id === 'Document' || symbol.id === 'PreDefinedProcess' ||
                symbol.id === 'PaperTap' || symbol.id === 'DirectData') {
                symbol.width = 50;
                symbol.height = 40;
            }
            symbol.style = { strokeWidth: 2 };
        }


        function valueChanged(args) {
            var palette = document.getElementById("symbolpalette").ej2_instances[0];
            palette.expandMode = expand.value;
            palette.dataBind();
        }
        function getSymbolInfo(symbol) {
            return { fit: true };
        }

        function onAnimationChange(args) {
            var palette = document.getElementById("symbolpalette").ej2_instances[0];
            palette.enableAnimation = args.checked;
        }

        function onItemTextChange(args) {
            var palette = document.getElementById("symbolpalette").ej2_instances[0];
            if (args.checked) {
                palette.getSymbolInfo = function (symbol) {
                    if (symbol.text !== undefined) {
                        return { description: { text: symbol.text, overflow: 'Wrap' } };
                    }
                    return { description: { text: symbol.id } };
                };
            }
            else {
                palette.getSymbolInfo = function (symbol) {
                    return { description: { text: '' } };
                };
            }
            palette.dataBind();
        }



        function sizeChanged(args) {
            var palette = document.getElementById("symbolpalette").ej2_instances[0];
            palette.symbolHeight = size.value;
            palette.symbolWidth = size.value;
        }

    </script>
}

@section ActionDescription{
    <p>
        This example illustrates predefining shapes in a palette that can be easily dragged and dropped into
        the drawing area. Customizable options of the symbol palette are also illustrated in this example.
    </p>
}

@section Description{
    <p>
        This example shows how to add shapes to symbol palette and how to customize it. The   <code>symbols</code>
        property can be used to add shapes to the symbol palette. The <code>symbolWidth</code> and
        <code>symbolHeight</code> properties allow you to define the size of the symbols.
    </p>
    <br>
}


