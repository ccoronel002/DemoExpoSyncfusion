@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="col-lg-8 control-section" style="float:left;padding:0px">
        <div class="content-wrapper">
            @(Html.EJS().Diagram("container")
    .Width("100%")
    .Height("700px")
    .Mode(Syncfusion.EJ2.Diagrams.RenderingMode.SVG)
    .GetNodeDefaults("getNodeDefaults")
    .GetConnectorDefaults("getConnectorDefaults")
    .SnapSettings(s => s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None))
    .Nodes(ViewBag.nodes)
    .Connectors(ViewBag.connectors).Render()

            )

        </div>
    </div>
    <div class="col-lg-4 property-section" style="float: right; height: 80%; padding: 0px 10px">
        <div class="property-panel-header">
            Properties
        </div>
        <div class="row" id="appearance">
            <div class="row row-header" style="padding-top: 10px">
                Appearance
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="preview0" style="background-image: url('Content/images/diagram/node/Nodes_1.png'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="preview1" style="background-image: url('Content/images/diagram/node/Nodes_2.png'); margin-right: 0px 3px">
                </div>
                <div class="image-pattern-style" id="preview2" style="background-image: url('Content/images/diagram/node/Nodes_3.png'); margin: 0px 3px">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="preview3" style="background-image: url('Content/images/diagram/node/Nodes_4.png'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="preview4" style="background-image: url('Content/images/diagram/node/Nodes_5.png'); margin-right: 0px 3px">
                </div>
            </div>
        </div>
        <div class="row" style="padding-top: 10px">
            <div class="row row-header" style="padding-top: 10px">
                Behaviour
            </div>
            <div class="row" style="padding-top: 8px">
                @Html.EJS().CheckBox("aspectRatio").Checked(false).Label("Aspect ratio").Change("checkBoxChange").Render()
            </div>
            <div class="row" style="padding-top: 8px">
                @Html.EJS().CheckBox("lock").Checked(false).Label("Lock").Change("lockChanged").Render()
            </div>
        </div>
    </div>
    <style>
        .image-pattern-style {
            background-color: white;
            background-size: contain;
            background-repeat: no-repeat;
            height: 75px;
            width: calc((100% - 12px) / 3);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }

        #container {
            display: block;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .row-header {
            font-size: 13px;
            font-weight: 500;
        }

        .e-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        .e-checkbox-wrapper .e-label {
            font-size: 12px;
        }

        .row {
            display: block;
        }
    </style>
    <script>
        function getNodeDefaults(node, diagram) {
            var obj = {};
            obj.shape = { shape: 'Ellipse' };
            obj.style = { fill: '#37909A', strokeColor: '#024249' };
            return obj;
        }
        function getConnectorDefaults(connector, diagram) {
            connector.targetDecorator.style = { fill: '#024249', strokeColor: '#024249' };
            return { style: { strokeColor: '#024249', strokeWidth: 2 } };
        }
        function getTextElement(text, color) {
            var textElement = new TextElement();
            textElement.width = 80;
            textElement.height = 35;
            textElement.content = text;
            textElement.style.fill = '#6f409f';
            textElement.style.color = 'white';
            textElement.style.strokeColor = '#6f409f';
            textElement.cornerRadius = 5;
            textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };
            textElement.relativeMode = 'Object';
            return textElement;
        }
        function getPorts(obj) {
            if (obj.id === 'node2') {
                var node2Ports = [
                    { id: 'port1', offset: { x: 1, y: 0.25 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port2', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port3', offset: { x: 1, y: 0.75 }, visibility: ej.diagrams.PortVisibility.Hidden }
                ];
                return node2Ports;
            } else if (obj.id === 'node6') {
                var node6Ports = [
                    { id: 'port4', offset: { x: 0, y: 0.46 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port5', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port6', offset: { x: 0, y: 0.54 }, visibility: ej.diagrams.PortVisibility.Hidden }
                ];
                return node6Ports;
            } else {
                var ports = [
                    { id: 'portIn', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'portOut', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                ];
                return ports;
            }
        }
        var style = document.getElementById('style');
        var node;
        document.getElementById('appearance').onclick = function (args) {
            var target = args.target;
            var diagram = document.getElementById("container").ej2_instances[0];
            var selectedElement = document.getElementsByClassName('e-selected-style');
            if (selectedElement.length) {
                selectedElement[0].classList.remove('e-selected-style');
            }
            if (target.className === 'image-pattern-style') {
                for (var i = 0; i < diagram.nodes.length; i++) {
                    node = diagram.nodes[i];
                    switch (target.id) {
                        case 'preview0':
                            applyStyle(node, 0, undefined, ej.diagrams.NodeConstraints.Default & ~ej.diagrams.NodeConstraints.Shadow, undefined, undefined);
                            target.classList.add('e-selected-style');
                            break;
                        case 'preview1':
                            applyStyle(node, 2, undefined, ej.diagrams.NodeConstraints.Default & ~ej.diagrams.NodeConstraints.Shadow, undefined, undefined);
                            target.classList.add('e-selected-style');
                            break;
                        case 'preview2':
                            applyStyle(node, 2, '5 5', ej.diagrams.NodeConstraints.Default & ~ej.diagrams.NodeConstraints.Shadow, undefined, undefined);
                            target.classList.add('e-selected-style');
                            break;
                        case 'preview3':
                            applyStyle(node, 2, '5 5', ej.diagrams.NodeConstraints.Default & ~ej.diagrams.NodeConstraints.Shadow, 'Radial', undefined);
                            target.classList.add('e-selected-style');
                            break;
                        case 'preview4':
                            var shadow = { angle: 45, distance: 15, opacity: 0.3, color: 'grey' };
                            applyStyle(node, 2, '5 5', ej.diagrams.NodeConstraints.Default | ej.diagrams.NodeConstraints.Shadow, undefined, shadow);
                            target.classList.add('e-selected-style');
                            break;
                    }
                }
            }
        };

        function checkBoxChange(args) {
            var label = "Aspect ratio";
            var diagram = document.getElementById("container").ej2_instances[0];
            for (var i = 0; i < diagram.nodes.length; i++) {
                node = diagram.nodes[i];
                if (args.checked) {
                    node.constraints |= ej.diagrams.NodeConstraints.AspectRatio;
                } else {
                    node.constraints &= ~ej.diagrams.NodeConstraints.AspectRatio;
                }
                diagram.dataBind();
            }

        }

        function lockChanged(args) {
            var label = "Lock";
            var diagram = document.getElementById("container").ej2_instances[0];
            for (var i = 0; i < diagram.nodes.length; i++) {
                node = diagram.nodes[i];
                if (args.checked) {
                    node.constraints &= ~(ej.diagrams.NodeConstraints.Resize | ej.diagrams.NodeConstraints.Rotate | ej.diagrams.NodeConstraints.Drag);
                    node.constraints |= ej.diagrams.NodeConstraints.ReadOnly;
                } else {
                    node.constraints |= ej.diagrams.NodeConstraints.Default & ~(ej.diagrams.NodeConstraints.ReadOnly);
                }
                diagram.dataBind();
            }

        }

        function applyStyle(node, width, array, con, type, sh) {
            var diagram = document.getElementById("container").ej2_instances[0];
            node.style.fill = '#37909A';
            node.style.strokeWidth = width;
            node.style.strokeColor = '#024249';
            node.style.strokeDashArray = array;
            node.constraints = con;
            if (!type) {
                node.style.gradient.type = 'None';
            } else {
                var gradient;
                gradient = {
                    cx: 50, cy: 50, fx: 50, fy: 50,
                    stops: [{ color: '#00555b', offset: 0 },
                    { color: '#37909A', offset: 90 }],
                    type: 'Radial'
                };
                node.style.gradient = gradient;
            }
            if (con & ej.diagrams.NodeConstraints.Shadow) {
                node.shadow = { angle: 45, distance: 15, opacity: 0.3, color: 'grey' };
            }
            diagram.dataBind();
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the different stages of a software development life cycle using a circular flow diagram. Customizing the appearance of the nodes is illustrated in this example.
    </p>
}
@section Description{
    <p>
        This example shows how to add nodes to a diagram control and how to customize the appearance of the nodes. The
        <code>style</code> property of the node can be used to customize the appearance of the nodes.
    </p>

    <p>
        To change the appearance, click different styles in the property panel.
    </p>

    <p>
        Here, you can see how to lock nodes to disable editing and how to enable proportional resizing. The
        <code>constraints</code> property of the node allows you to enable/disable editing and proportional resizing.
    </p>
    <br>
}
