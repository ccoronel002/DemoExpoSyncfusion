@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@using EJ2MVCSampleBrowser.Models

@section ControlsSection {
    <div class="col-lg-8 control-section">
        <div class="control_wrapper">
            @Html.EJS().Uploader("UploadFiles").DropArea(".control-fluid").MaxFileSize(104857600).Removing("onFileRemove").AutoUpload(false).AsyncSettings(new Syncfusion.EJ2.Inputs.UploaderAsyncSettings { SaveUrl = @Url.Content("/Uploader/Save"), RemoveUrl = @Url.Content("/Uploader/Remove"), ChunkSize = 500000 }).Render()
        </div>
    </div>

    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%;">
            <tr>
                <td class="left-side">Chunk Size: </td>
                <td style="padding-top: 10px">
                    @Html.EJS().DropDownList("chunksize").Placeholder("Select chunk size").PopupHeight("220px").Text("500 KB").DataSource(
                                        (IEnumerable<chunkValues>)ViewBag.data).Change("valueChange").Fields(new DropDownListFieldSettings { Text = "text", Value = "chunkValue" }).Render()
                </td>
            </tr>
        </table>
    </div>

}

<style>
    .control_wrapper {
        max-width: 400px;
        margin: 0 auto;
    }

    .e-upload {
        width: 100%;
        position: relative;
        margin-top: 15px;
    }

    .control_wrapper .e-upload .e-upload-drag-hover {
        margin: 0;
    }
</style>

<script>
    function valueChange(args) {
        var uploadObj = document.getElementById('UploadFiles').ej2_instances[0];
        uploadObj.asyncSettings.chunkSize = parseInt(args.itemData.chunkValue);
    }
    function onFileRemove(args) {
        args.postRawFile = false;
    }
</script>

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the chunk upload functionalities of the Uploader component. Browse the files which you want to upload to the server.
            The selected files are submitted to server on upload button click based on the selected chunk size.
            Also, You can pause the uploading file and resuming it. Once the upload got failed, it will retry automatically.
            Even it fails to upload in auto retry, retry button will be enabled to retry the upload later.
        </p>
        <p>Also, provided option to change the chunk size values from the property panel</p>

    </div>
}

@section Description{
    <div id="description">
        <p>
            When the file size is larger or slow network connection, you can upload the files using
            <a href="https://ej2.syncfusion.com/documentation/uploader/api-uploader.html?lang=typescript#asyncsettings"
               target="_blank">chunkSize</a> API. It will slice the files and upload it in sequential order.
        </p>
        <p>While the uploading is in progress, you can pause the upload and resuming it later.</p>
        <p>If the upload got failed, retry option will be enabled.</p>
        <p>The sample is configured with maximum file size as `100 MB` to upload. </p>
        <p>More information on the Uploader instantiation can be found in this documentation section.</p>

    </div>
}


