@using Syncfusion.EJ2;

@section ActionDescription{
    This sample demonstrates how to manipulate cells in a spreadsheet using XlsIO.
}

@section Description{
    <p>
        A range is a group or block of cells in a worksheet. Ranges are identified by cell references or addresses of the cells in the upper-left and lower-right corners of the range. These two references are separated by a colon (:), which tells Excel to include all the cells between these start and end points. An adjacent cell's range can be depicted as "A5:F10".
    </p>
    <br />This sample demonstrates Essential XlsIO's support for manipulating a range of cells.  <br />
    <br />
    <b>Features:</b>
    <br />
    <br />
    <ul>
        <li>Named range usage</li>
    </ul>
    <br />
    <div class="rowdiv">
        Named ranges are a powerful tool in Excel that allows to assign a meaningful name to a single cell or a range of cells. For example, you can assign the name "Cell1" to cell "C1" and then use the name "Cell1" anytime you would normally use the cell C1. This allows the user to name a collection of cells or a single cell, making it more readable.
    </div>
}
@section ControlsSection{
    <div class="control-section">
        <h5>
            Click the button to view an Excel spreadsheet generated by Essential XlsIO. Please
            note that Microsoft Excel Viewer or Microsoft Excel is required to view the resultant document.
        </h5>
        <br />
        <h5>  Save As :</h5>
        <div class="celldiv">
            <table>
                <tr>
                    <td>
                        @Html.EJS().RadioButton("radio1").Label("XLS").Name("select").Value("xls").Checked(false).Render()
                    </td>
                    <td>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </td>
                    <td>
                        @Html.EJS().RadioButton("radio2").Label("XLSX").Name("select").Value("xlsx").Checked(true).Render()
                    </td>
                </tr>
            </table>
        </div>
        <br />
        <div class="celldiv">
            @Html.EJS().Button("normalbtn").Content("Create Document").Render()
        </div>
    </div>
    <script>
    document.getElementById('normalbtn').onclick = function () {
        if (document.getElementById('radio1').checked == true)
            location.href = '@Url.Action("RangeManipulation", new { saveOption = "Xls" })';
        else
            location.href = '@Url.Action("RangeManipulation", new { saveOption = "xlsx" })';
    };
    </script>

}
