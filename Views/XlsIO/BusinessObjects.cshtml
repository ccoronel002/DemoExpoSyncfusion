@using Syncfusion.EJ2

@section ActionDescription{
    This sample demonstrates how to use BusinessObjects in spreadsheets using XlsIO.
}
@section Description{
    Essential XlsIO allows you to import/export data from/to Business Objects. Business object usually holds a set of instance variables or properties, also known as attributes.
    <br />
    <br />This sample demonstrates the usage of business objects using Essential XlsIO.
    <br />
}
@section ControlsSection{
    <div class="control-section">
        @{Html.BeginForm("BusinessObjects", "XlsIO", FormMethod.Post);
        <div class="rowdiv">
            <p>
                Click the button to view an Excel spreadsheet generated by Essential XlsIO. Please
                note that Microsoft Excel Viewer or Microsoft Excel is required to view the resultant document.
            </p>
            @Html.EJS().Grid("Export").AllowPaging(true).DataSource(dataManger =>
       {
           dataManger.Url("/XlsIO/UrlDatasource").UpdateUrl("/XlsIO/Update").Adaptor("UrlAdaptor");
       }).Columns(col =>
       {
           col.Field("ID").HeaderText("ID").IsPrimaryKey(true).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Width("35").Add();
           col.Field("SalesPerson").HeaderText("SalesPerson").Width("90").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Add();
           col.Field("SalesJanJune").HeaderText("SalesJanJune").Width("70").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
           col.Field("SalesJulyDec").HeaderText("SalesJulyDec").Width("70").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Add();
           col.Field("Change").HeaderText("Change").Width("70").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Add();
       }).Width("550").Height("250").EditSettings(edit => { edit.AllowAdding(true).AllowEditing(true).AllowDeleting(true).Mode(Syncfusion.EJ2.Grids.EditMode.Normal); }).Render()

            <div class="rowdiv">
                <div class="celldiv">
                    <label>
                        <strong> Save As :</strong>
                    </label>
                     @Html.EJS().RadioButton("radio1").Label("XLS").Name("SaveOption").Value("Xls").Checked(false).Render()
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                     @Html.EJS().RadioButton("radio2").Label("XLSX").Name("SaveOption").Value("Xlsx").Checked(true).Render()
                  </div>
                <br />
                <div class="celldiv">
                    <input id="input"  class="e-btn" type="submit" name="button" value="Input Template" style="width:162px;" />
                    <input id="import"  class="e-btn" type="submit" name="button" value="Import From Excel" style="width:162px;" />
                    <input id="export"  class="e-btn" @ViewBag.exportButtonState type="submit" name="button" value="Export To Excel" style="width:162px;" />
                </div>
            </div>

        </div>
        <script type="text/javascript">

            function EnableExport() {
                document.getElementById('export').prop("disabled", false);

            }
        </script>
        }
    </div>
}