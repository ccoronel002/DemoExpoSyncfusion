@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section">
        <h4 id="days" style="font-family: Segoe UI; font-weight: 500; font-size: 15px; font-style: normal" align="center">Inflation - Consumer Price</h4>
        <div id="container" align="center">
            @(Html.EJS().RangeNavigator("container")
                    .LabelPosition(Syncfusion.EJ2.Charts.AxisPosition.Outside)
                    .IntervalType(Syncfusion.EJ2.Charts.RangeIntervalType.Years)
                    .Tooltip(tl=>tl.Enable(true).DisplayMode(Syncfusion.EJ2.Charts.TooltipDisplayMode.Always))
                    .ValueType(Syncfusion.EJ2.Charts.RangeValueType.DateTime).EnableRtl(true)
                    .Series(sr =>
                    {
                        sr.XName("xDate").YName("High").Width(2).Type(Syncfusion.EJ2.Charts.RangeNavigatorType.Area).Add();
                    })
                    .Changed("changed").Load("load").Render()
            )
        </div>
        <div id="chartcontainer" align="center">
            @(Html.EJS().Chart("chart")
            .Series(sr =>
            {
                sr.XName("xDate")
                   .YName("High")
                   .Name("England")
                   .Width(2).Type(Syncfusion.EJ2.Charts.ChartSeriesType.Area).Add();
            })
              .PrimaryXAxis(xaxis =>
                 xaxis.IsInversed(true).CrosshairTooltip(ViewBag.Cross).MajorGridLines(ViewBag.lineWidth)
                      .ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime)
                      .EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift)

              )
              .ChartArea(ca => ca.Border(ViewBag.border))
              .PrimaryYAxis(yaxis =>
                  yaxis.MajorTickLines(ViewBag.lineWidth)
                        .LineStyle(ViewBag.lineWidth))
                        .Height("350").Tooltip(tl => tl.Enable(true).Shared(true))
                        .LegendSettings(ls=>ls.Visible(false))
                        .Load("chartload").Render()
            )


        </div>
    </div>

    <style>
    #container {
        padding: 0px !important;
    }

    #material-gradient-chart stop {
        stop-color: #00bdae;
    }

    #fabric-gradient-chart stop {
        stop-color: #4472c4;
    }

    #bootstrap-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #highcontrast-gradient-chart stop {
        stop-color: #79ECE4;
    }

    .chart-gradient stop[offset="0"] {
        stop-opacity: 0.9;
    }

    .chart-gradient stop[offset="1"] {
        stop-opacity: 0.3;
    }
</style>

<svg style="height: 0">
    <defs>
        <linearGradient id="material-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fabric-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
    </defs>
</svg>

<script src="~/Scripts/datasource.js"></script>
    <script>
        var data = axesData;
        var zoomFactor, zoomPosition;
        var selectedTheme = location.hash.split('/')[1];
        selectedTheme = selectedTheme ? selectedTheme : 'Material';
        var theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
        var themes = ['Material', 'Fabric', 'Bootstrap', 'Highcontrast']
        var borderColor = ['#00bdae', '#4472c4', '#a16ee5', '#79ECE4'];
        var regionColor = ['rgba(0, 189, 174, 0.3)', 'rgba(68, 114, 196, 0.3)',
            'rgba(161, 110, 229, 0.3)', 'rgba(121, 236, 228, 0.3)'];
        var load = function (args) {
            args.rangeNavigator.theme = theme;
            args.rangeNavigator.width = ej.base.Browser.isDevice ? "100%" : "80%";
            args.rangeNavigator.series[0].dataSource = data;
            args.rangeNavigator.series[0].border = { width: 2, color: borderColor[themes.indexOf(theme)] };
            args.rangeNavigator.series[0].fill = 'url(#' + theme.toLowerCase() + '-gradient-chart)';
            args.rangeNavigator.value = [new Date('2014-01-01'), new Date('2015-12-31')];
        }
        var chartload = function (args) {
            args.chart.theme = theme;
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "80%";
            args.chart.series[0].border = { width: 2, color: borderColor[themes.indexOf(theme)] };
            args.chart.series[0].fill = 'url(#' + theme.toLowerCase() + '-gradient-chart)';
            args.chart.series[0].dataSource = data;
            args.chart.tooltip.header = '<b>England<b>';
            args.chart.tooltip.format = '${point.x} : <b>${point.y}<b>';
            args.chart.zoomFactor = zoomFactor;
            args.chart.zoomPosition = zoomPosition;
        }
        var changed = function (args) {
            zoomFactor = args.zoomFactor;
            zoomPosition = args.zoomPosition;
            if ((document.getElementById('chart').childNodes.length > 1)) {
                var chart = document.getElementById('chart').ej2_instances[0];
                chart.primaryXAxis.zoomFactor = args.zoomFactor;
                chart.primaryXAxis.zoomPosition = args.zoomPosition;
                chart.dataBind();
            }

        }
    </script>
}
@section ActionDescription{
    <p>
        This sample illustrates RTL in the range navigator.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to inverse the axis in range navigator. Here both the X and Y axis are inversed using <code>isInversed</code>
        property. Tooltip is enabled in this example, to see the tooltip in action, while the selected range is changed.
    </p>
}