@using Syncfusion.EJ2
@using Syncfusion.EJ2.Notifications;
@using Syncfusion.EJ2.DropDowns;
@using Syncfusion.EJ2.Buttons;
@section ControlsSection{
    <div class="col-lg-12 control-section toast-api-section">
        <div class="control_wrapper">
            @Html.EJS().Toast("toastApi").Position(p => p.X("Right").Y("Bottom")).BeforeOpen("onBeforeOpen").NewestOnTop(true).TimeOut(5000).Render()
            <div class="row">
                <div class="col-lg-6 padding">
                    <div class="input-form">
                        <div class="e-float-input">
                            <input class="e-input" id="toast_input_title" required="">
                            <span class="e-float-line"></span>
                            <label class="e-float-text">Enter the title</label>
                        </div>
                    </div>
                    <div class="input-form">
                        <div class="e-float-input">
                            <textarea class="e-input" id="toast_input_content" rows="3" required=""></textarea>
                            <label class="e-float-text">Enter the content</label>
                        </div>
                    </div>
                    <div class="group-form e-group">
                        <input id="closeButton" type="checkbox">
                    </div>
                    <div class="group-form">
                        <input id="progressBar" type="checkbox">
                    </div>
                    <div class="group-form">
                        <input id="newestOnTop" type="checkbox">
                    </div>
                    <div class="group-form">
                        <input id="prevDuplicates" type="checkbox">
                    </div>
                    <div class="group-form">
                        <input id="actionButtons" type="checkbox">
                    </div>
                    <div class="input-form">
                        <div class="e-float-input e-input-group">
                            <input class="e-input" id="timeOut" name="Digits" value="5000" digits="true" data-digits-message="Please enter digits only." required="">
                            <span class="e-float-line"></span>
                            <label class="e-float-text" for="Digits">TimeOut</label>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 padding">
                    <div class="input-form">
                        <h4> Show Animation</h4>
                        <div class="e-float-input">
                            <input class="e-input" id="showDuration" value="400" required="">
                            <span class="e-float-line"></span>
                            <label class="e-float-text">Duration</label>
                        </div>
                    </div>
                    <div class="input-form">
                        <select id="ShowEasing">
                            <option value="ease">Ease</option>
                            <option value="linear">Linear</option>
                        </select>
                    </div>
                    <div class="input-form">
                        <select id="ShowAnimation">
                            <option value="SlideBottomIn">Slide Bottom In</option>
                            <option value="FadeIn">Fade In</option>
                            <option value="FadeZoomIn">Fade Zoom In</option>
                            <option value="FadeZoomOut">Fade Zoom Out</option>
                            <option value="FlipLeftDownIn">Flip Left Down In</option>
                            <option value="FlipLeftDownOut">Flip Left Down Out</option>
                            <option value="FlipLeftUpIn">Flip Left Up In</option>
                            <option value="FlipLeftUpOut">Flip Left Up Out</option>
                            <option value="FlipRightDownIn">Flip Right Down In</option>
                            <option value="FlipRightDownOut">Flip Right Down Out</option>
                            <option value="FlipRightUpIn">Flip Right Up In</option>
                            <option value="FlipRightUpOut">Flip Right Up Out</option>
                            <option value="SlideBottomOut">Slide Bottom Out</option>
                            <option value="SlideLeftIn">Slide Left In</option>
                            <option value="SlideLeftOut">Slide Left Out</option>
                            <option value="SlideRightIn">Slide Right In</option>
                            <option value="SlideRightOut">Slide Right Out</option>
                            <option value="SlideTopIn">Slide Top In</option>
                            <option value="SlideTopOut">Slide Top Out</option>
                            <option value="ZoomIn">Zoom In</option>
                            <option value="ZoomOut">Zoom Out</option>
                            <option value="ZoomOut">Zoom Out</option>
                        </select>
                    </div>
                    <div class="input-form e-group">
                        <h4> Hide Animation</h4>
                        <div class="e-float-input">
                            <input class="e-input" id="hideDuration" value="400" required="">
                            <span class="e-float-line"></span>
                            <label class="e-float-text">Duration</label>
                        </div>
                    </div>
                    <div class="input-form">
                        <select id="HideEasing">
                            <option value="ease">Ease</option>
                            <option value="linear">Linear</option>
                        </select>
                    </div>
                    <div class="input-form">
                        <select id="HideAnimation">
                            <option value="SlideBottomOut">Slide Bottom Out</option>
                            <option value="FadeIn">Fade In</option>
                            <option value="FadeZoomIn">Fade Zoom In</option>
                            <option value="FadeZoomOut">Fade Zoom Out</option>
                            <option value="FlipLeftDownIn">Flip Left Down In</option>
                            <option value="FlipLeftDownOut">Flip Left Down Out</option>
                            <option value="FlipLeftUpIn">Flip Left Up In</option>
                            <option value="FlipLeftUpOut">Flip Left Up Out</option>
                            <option value="FlipRightDownIn">Flip Right Down In</option>
                            <option value="FlipRightDownOut">Flip Right Down Out</option>
                            <option value="FlipRightUpIn">Flip Right Up In</option>
                            <option value="FlipRightUpOut">Flip Right Up Out</option>
                            <option value="SlideBottomIn">Slide Bottom In</option>
                            <option value="SlideLeftIn">Slide Left In</option>
                            <option value="SlideLeftOut">Slide Left Out</option>
                            <option value="SlideRightIn">Slide Right In</option>
                            <option value="SlideRightOut">Slide Right Out</option>
                            <option value="SlideTopIn">Slide Top In</option>
                            <option value="SlideTopOut">Slide Top Out</option>
                            <option value="ZoomIn">Zoom In</option>
                            <option value="ZoomOut">Zoom Out</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="row center">
                <button id="toastBtnShow" class="e-btn e-primary">Show Toasts</button>
                <button id="toastBtnHide" class="e-btn e-primary" style='display: none'>Hide all</button>
            </div>
        </div>
    </div>
    <script type="text/javascript">
        //Initialize Checkbox component and Rendering
        var checkBoxObj = new ej.buttons.CheckBox({ label: 'Show Close Button', change: closeOnChange });
        checkBoxObj.appendTo('#closeButton');

        var checkBoxObj1 = new ej.buttons.CheckBox({ label: 'Show Progress Bar', change: OnProgressChange });
        checkBoxObj1.appendTo('#progressBar');

        var checkBoxObj2 = new ej.buttons.CheckBox({ label: 'Newest On Top', checked: true, change: closeNewestOnChange });
        checkBoxObj2.appendTo('#newestOnTop');

        var checkBoxObj3 = new ej.buttons.CheckBox({ label: 'Prevent Duplicates', change: OnPrevDubChange });
        checkBoxObj3.appendTo('#prevDuplicates');

        var checkBoxObj4 = new ej.buttons.CheckBox({ label: 'Action Buttons', change: OnactionBtnChange });
        checkBoxObj4.appendTo('#actionButtons');

        var btnEleShow = document.getElementById('toastBtnShow');
        var btnEleHide = document.getElementById('toastBtnHide');
        var prevDuplicates = false;

        btnEleShow.onclick = function () { showToast(); };
        btnEleHide.onclick = function () {
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            toastObj.hide('All');
        };

        document.onclick = function (e) {
            if (e.target !== btnEleShow) {
                var toastObj = document.getElementById('toastApi').ej2_instances[0];
                toastObj.hide('All');
            }
        };
        function showToast() {
            var title = (document.getElementById('toast_input_title')).value;
            var content = (document.getElementById('toast_input_content')).value;
            if (title === '' && content === '') {
                content = 'You have created a Toast message';
            }
            var showDuration = parseInt((document.getElementById('showDuration')).value, 10);
            var hideDuration = parseInt((document.getElementById('hideDuration')).value, 10);
            var timeOut = parseInt((document.getElementById('timeOut')).value, 10);
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            toastObj.show(
                {
                    title: title, content: content, timeOut: timeOut,
                    animation: {
                        show: { duration: showDuration },
                        hide: { duration: hideDuration }
                    }, target: document.body
                });
        }

        //Initialize DropDownList component and Rendering
        var dropDownListShow = new ej.dropdowns.DropDownList({
            placeholder: 'Select an Animation', change: showChange
        });
        dropDownListShow.appendTo('#ShowAnimation');
        setTimeout(
            () => {
                showChange();
            }, 500);


        //Initialize DropDownList component and Rendering
        var dropDownListHide = new ej.dropdowns.DropDownList({
            placeholder: 'Select an Animation',
            change: hideChange
        });
        dropDownListHide.appendTo('#HideAnimation');
        setTimeout(
            () => {
                hideChange();
            }, 500);


        //Initialize DropDownList component and Rendering
        var dropDownListShowEase = new ej.dropdowns.DropDownList({
            placeholder: 'Select an Easing',
            change: onShowEase
        });
        dropDownListShowEase.appendTo('#ShowEasing');

        //Initialize DropDownList component and Rendering
        var dropDownListHideEase = new ej.dropdowns.DropDownList({
            placeholder: 'Select an Easing',
            change: onHideEase
        });
        dropDownListHideEase.appendTo('#HideEasing');

        function onShowEase() {
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            toastObj.animation.show.easing = dropDownListShowEase.value.toString();
        }

        function onHideEase() {
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            toastObj.animation.hide.easing = dropDownListHideEase.value.toString();
        }

        function showChange(e) {
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            toastObj.animation.show.effect = dropDownListShow.value;
        }

        function hideChange(e) {
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            toastObj.animation.hide.effect = dropDownListHide.value;
        }

        // Toast beforeOpen Event Function
        function onBeforeOpen(e) {
            btnEleHide.style.display = 'inline-block';
            if (prevDuplicates) {
                e.cancel = preventDuplicate(e);
            }
        }

        // Toast preventDuplicate Function for toast title
        function preventDuplicate(e) {

            var toastEle = e.element;
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            var toasts = e.toastObj.element.children;
            for (var i = 0; i < toasts.length; i++) {
                var toastTitle = (toasts[i]).querySelector('.e-toast-title');
                var toastMessage = (toasts[i]).querySelector('.e-toast-message');
                if (toastTitle && toastTitle.isEqualNode(toastEle.querySelector('.e-toast-title'))) {
                    return true;
                }
                if (!toastTitle && toastMessage && toastMessage.isEqualNode(toastEle.querySelector('.e-toast-message'))) {
                    return true;
                }

            }
            return false;
        }

        function closeOnChange(e) {
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            e.checked ? toastObj.showCloseButton = true : toastObj.showCloseButton = false;
        }
        function OnProgressChange(e) {
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            e.checked ? toastObj.showProgressBar = true : toastObj.showProgressBar = false;
        }
        function closeNewestOnChange(e) {
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            e.checked ? toastObj.newestOnTop = true : toastObj.newestOnTop = false;
        }
        function OnPrevDubChange(e) {
            prevDuplicates = e.checked;
        }
        function onActionBtnClick(e) {
            alert('Action button is clicked');
        }
        function OnactionBtnChange(e) {
            var toastObj = document.getElementById('toastApi').ej2_instances[0];
            if (e.checked) {
                toastObj.buttons = [{ model: { content: '<div class="e-toast-btn"> Click Here </div>' }, click: onActionBtnClick }];
            } else { toastObj.buttons = []; }
        }

    </script>
    <style>
        .toast-api-section .input-form {
            margin: 33px 0;
        }

        .toast-api-section .group-form {
            margin: 25px 0;
        }

            .toast-api-section .group-form.e-group {
                margin-top: 35px;
            }

        .toast-api-section .row .padding {
            padding: 15px;
        }

        .toast-api-section .row.center {
            text-align: center;
        }

        .toast-api-section .row {
            padding: 0 15px;
        }
    </style>
}

@section ActionDescription{


    <div id="action-description">
        <p>This sample demonstrates all the API functionalities available in Toast.</p>
    </div>



}
@section Description{


     <div id="description">
    <p>In this sample, with help of text inputs toast header title and content text can be provided.</p>
    <ul>
        <li>
            <code>Action Buttons</code> – Provide support to add a button inside toast to interact with it.
        </li>
        <li>
            <code>Prevent Duplicates</code> – Disable the user to create same toast message multiple times.
        </li>
        <li>
            <code> TimeOut</code> – Allows to set time in millisecond to close toast.
        </li>
        <li>
            <code> Progress Bar</code> – Visualizes the time out of toast as an indicator.
        </li>
        <li>
            <code> Animation</code> – Enables to define the toast show and hide animation.
        </li>
        <li>
            <code>Close button</code> – Show close button to hide toast irrespective of time out.
        </li>
    </ul>
    <p>
        More information about Toast can be found in this
        <a href="http://ej2.syncfusion.com/documentation/toast/" target="_blank"> documentation section</a>.
    </p>
</div>



}

